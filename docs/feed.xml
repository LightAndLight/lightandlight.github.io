<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>blog.ielliott.io</title>
    <link href="https://blog.ielliott.io/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.ielliott.io/" rel="alternate" type="text/html" />
    <id>https://blog.ielliott.io/feed.xml</id>
    <author>
        <name>Isaac Elliott</name>
        
        <email>isaace71295@gmail.com</email>
        
    </author>
    <updated>2023-05-01T10:23+00:00</updated>
    <entry>
    <title>Web Resources I Enjoy</title>
    <link href="https://blog.ielliott.io/web-resources-i-enjoy" />
    
    <id>https://blog.ielliott.io/favourites</id>
    
    <published>2023-01-10T00:00:00Z</published>
    <updated>2023-05-01T10:23+00:00</updated>
    <summary type="html"><![CDATA[<p>In
<a href="https://www.samharris.org/podcasts/making-sense-episodes/304-why-i-left-twitter">this
conversation</a>,
<a href="https://www.samharris.org">Sam Harris</a> and <a href="https://www.calnewport.com">Cal Newport</a> talked about
how we use the world wide web, how it has become extremely centralised around a few social media
platforms, and the role of recommendation algorithms in this system. Parts of this conversation are
starting to influence the way I use the web.</p>]]></summary>
    
    <content type="html" xml:base="https://blog.ielliott.io/web-resources-i-enjoy">
      <![CDATA[<p>In
<a href="https://www.samharris.org/podcasts/making-sense-episodes/304-why-i-left-twitter">this
conversation</a>,
<a href="https://www.samharris.org">Sam Harris</a> and <a href="https://www.calnewport.com">Cal Newport</a> talked about
how we use the world wide web, how it has become extremely centralised around a few social media
platforms, and the role of recommendation algorithms in this system. Parts of this conversation are
starting to influence the way I use the web.</p>
<p>Recommendation algorithms on social media don’t optimise for general human flourishing.
They maximise metrics like engagement, views, clicks, or comments. To social media, all engagement is good,
regardless of its impact on your life.</p>
<p>Before centralised social media, we had a very organic recommendation system.
You read the blogs of people who you thought were interesting, and they linked
to sites that they thought were interesting, and you would follow some of those links and find new
content for yourself. In this organic system, <em>we</em> are the recommenders.
We can “optimise” our recommendations for things that are highly personal and very difficult to
measure, like curiosity, wonder, awe, learning, and insight.</p>
<p>I’d like to contribute to a more distributed, personalised, and organic world wide web, so I’ve
created a <a href="/resources">resources page</a>. I’ll continue to add various web resources that I find
interesting, in the hope that others might use it to find something new.</p>]]>
    </content>
    
</entry><entry>
    <title>2022 Project Review</title>
    <link href="https://blog.ielliott.io/2022-project-review" />
    
    <id>https://blog.ielliott.io/project-review</id>
    
    <published>2022-12-22T00:00:00Z</published>
    <updated>2023-05-01T10:23+00:00</updated>
    <summary type="html"><![CDATA[<p>Reflections this year's hobby projects.</p>]]></summary>
    
    <content type="html" xml:base="https://blog.ielliott.io/2022-project-review">
      <![CDATA[<p>Here’s a review of all<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> the programming projects I worked on in my spare time this year.
I’m quite satisfied with the work I did. I learned a lot
and had some cool ideas that I will continue to build on. I’m glad I wrote this review, because
there’s some stuff in here that I’m quite proud of that I had forgotten about. This year was a
pretty long one for me.</p>
<h2 id="ipso"><code>ipso</code></h2>
<p><em>Ongoing</em></p>
<p><a href="https://github.com/LightAndLight/ipso" class="uri">https://github.com/LightAndLight/ipso</a></p>
<p><code>ipso</code> is a scripting language that I started working on a bit over 2 years ago. My goal for this
project is to have a scripting language that I <em>actually enjoy</em> using. So far I haven’t found a
language that I find satisfactory for small administrative programs; Bash and Python have no types,
and Haskell is a bit slow and old for interpreted use, for example. <code>ipso</code> is my attempt at an answer.</p>
<p>This year I set up a website (<a href="https://ipso.dev" class="uri">https://ipso.dev</a>) and published my first few <a href="https://github.com/LightAndLight/ipso/releases">releases on
GitHub</a>.</p>
<p>Some of this year’s features and milestones that I’m proud of:</p>
<ul>
<li><a href="https://github.com/LightAndLight/ipso/issues/170">REPL</a></li>
<li><a href="https://github.com/LightAndLight/ipso/pull/177"><code>Debug</code> instances for extensible records and
variants</a> (<a href="https://ipso.dev/docs/reference.html#debugging">reference
docs</a>)</li>
<li><a href="https://github.com/LightAndLight/ipso/issues/95">Nested pattern matching</a></li>
<li><a href="https://github.com/LightAndLight/ipso/blob/main/.github/workflows/uploadToCache">Using <code>ipso</code> in a CI script</a></li>
</ul>
<p>The language itself is pretty stable now, so now my focus will be on writing standard library functions.</p>
<h2 id="ray-tracing-in-one-weekend"><code>ray-tracing-in-one-weekend</code></h2>
<p><em>January</em></p>
<p><a href="https://github.com/LightAndLight/ray-tracing-in-one-weekend" class="uri">https://github.com/LightAndLight/ray-tracing-in-one-weekend</a></p>
<p><img src="https://github.com/LightAndLight/ray-tracing-in-one-weekend/raw/main/render.png"
width="100%" ></p>
<p>An implementation of Peter Shirley’s <a href="https://raytracing.github.io/">Ray Tracing in One Weekend</a>
with some extra features. It was super fun. It’s incredibly satisfying to go from a bunch of math to
beautiful images.</p>
<p>The most striking thing I learned was <a href="https://en.wikipedia.org/wiki/Monte_Carlo_integration">Monte Carlo
integration</a>. It’s a way to compute integrals
using random numbers. Ray tracing uses it to approximate the colour of a point on a surface. Every
point on a surface has a specific, well-defined colour, and that colour can be the result of
contributions from an extremely large number incident rays. The point’s colour can be expressed as
an integral, and we use Monte Carlo integration to compute the integral with a varying level of
accuracy. For a preview render, we can use few samples, and quickly produce a noisy image. For a full
render we can use many samples, which will take longer, but will give a very accurate result.</p>
<h2 id="sylva"><code>sylva</code></h2>
<p><em>January</em></p>
<p><a href="https://github.com/LightAndLight/sylva" class="uri">https://github.com/LightAndLight/sylva</a></p>
<p>“Sylva” means “forest” in Latin (according to Google Translate). I was playing with some
ideas about wikis / “document-based knowledge graphs”.</p>
<p>There were tree things I wanted to combine:</p>
<ul>
<li>A web-based user interface</li>
<li>Using a Git repository for versioning documents</li>
<li>Preventing dead links within the “wiki”</li>
</ul>
<p>This was just a sketch and I don’t plan to do anything with it.</p>
<h2 id="editor-vue"><code>editor-vue</code></h2>
<p><em>March</em></p>
<p><a href="https://github.com/LightAndLight/editor-vue" class="uri">https://github.com/LightAndLight/editor-vue</a></p>
<p>A while ago I built a toy <a href="https://github.com/LightAndLight/edit-log">structural code editor</a> using
Haskell (GHCJS), and the <code>reflex</code> FRP library. I wasn’t happy with the performance. I heard about
<a href="https://vuejs.org/">vue.js</a> and was curious what it would be like to use it instead of <code>reflex</code>. I
rebuilt some of the code editor using <code>vue.js</code> with TypeScript, enough to get a sense of the coding
style and performance of the app. I was impressed by the performance improvements, and found
TypeScript tolerable (and much, much better than plain JavaScript).</p>
<h2 id="nix-docs"><code>nix-docs</code></h2>
<p><em>March / April</em></p>
<p><a href="https://github.com/LightAndLight/nix-docs" class="uri">https://github.com/LightAndLight/nix-docs</a></p>
<p><code>nix-docs</code> is an ongoing experiment with reference documentation for some important Nix functions. Most Nix documentation is prose paragraphs, which is pretty bad for reference docs. Reference docs
need to be skimmable, terse, and interlinked. Here’s the <code>nix-docs</code> page for
<code>mkDerivation</code>: <a href="https://blog.ielliott.io/nix-docs/mkDerivation.html" class="uri">https://blog.ielliott.io/nix-docs/mkDerivation.html</a>.</p>
<p>This year I updated the styling to match the new <a href="https://nixos.org/">NixOS</a> design and wrote a documentation generator for the content (my first iteration was hand-edited HTML that I copied
from the Nixpkgs manual).</p>
<h2 id="ccc"><code>ccc</code></h2>
<p><em>May</em></p>
<p><a href="https://github.com/LightAndLight/ccc" class="uri">https://github.com/LightAndLight/ccc</a></p>
<p><code>ccc</code> stands for <a href="https://ncatlab.org/nlab/show/cartesian+closed+category">cartesian closed
category</a>. I was inspired by <a href="https://www.typetheoryforall.com/2022/05/09/17-The-Lost-Elegance-of-Computation-(Conal-Elliott).html">this podcast with Conal
Elliott</a>,
and revisited his <a href="http://conal.net/papers/compiling-to-categories/">compiling to categories</a> and
<a href="http://conal.net/papers/calculating-compilers-categorically/">calculating compilers categorically</a>
papers. One important insight from “calculating compilers categorically” is that translating lambda
expressions into CCC syntax sort of “sequentialises” them. The composition operation in a category
implies an order of operations: <code>g ∘ f</code> is often read as <code>g</code> after <code>f</code>. It seems to me that CCC
syntax is closer to our <a href="https://doi.org/10.1145/359576.359579">word-at-a-time</a>-style imperative CPUs.</p>
<p>This leads to the first idea I explored in <code>ccc</code> was: using CCC syntax as an intermediate
representation for lambda calculus. This worked out really well; I learned that the lambda to CCC
translation also performs closure conversion, which is another reason that CCC syntax is easier to
compile to imperative code.</p>
<p>The second idea builds on the first. Once we have a program in CCC syntax, a compiler can be defined
as a functor from CCC syntax to another cartesian closed category. I think Conal mentioned this in
the podcast episode. I wrote a messy <a href="https://github.com/LightAndLight/ccc/blob/68d0214a778a19f04ee7c96a973749bd0d09d4d1/src/SSA.hs">SSA
compiler</a>
as a functor from CCC syntax arrows to “SSA builder arrows” (Haskell functions of type
<code>SSA -&gt; SSA</code>). It was pretty straightforward because CCC syntax is sequential and closure-converted.</p>
<p>The last idea was to apply these techniques to
<a href="https://en.wikipedia.org/wiki/Substructural_logic">substructural</a> lambda calculi (i.e. <a href="https://en.wikipedia.org/wiki/Affine_logic">affine</a> and
<a href="https://en.wikipedia.org/wiki/Linear_logic">linear</a> lambda calculus). Linear lambda calculus has
its own categorical syntax (<a href="https://ncatlab.org/nlab/show/symmetric+monoidal+category">closed symmetric monoidal
category</a> - call it CSMC for short),
so I wrote a
<a href="https://github.com/LightAndLight/ccc/blob/68d0214a778a19f04ee7c96a973749bd0d09d4d1/proofs/Linear.agda">program</a>
that translates lambda calculus to CSMC syntax, and rejects lambda calculus terms that have
non-linear variable usages. I then used the same program structure to translate lambda terms to
<a href="https://ncatlab.org/nlab/show/semicartesian+monoidal+category">semicartesian monoidal category</a>
syntax, which is just CSMC syntax with a <a href="https://ncatlab.org/nlab/show/terminal+object">terminal
object</a>.
<a href="https://github.com/LightAndLight/ccc/blob/68d0214a778a19f04ee7c96a973749bd0d09d4d1/proofs/Affine.agda">That translation</a>
allows unused variables while rejecting variable duplication, which makes it affine. The <a href="https://github.com/LightAndLight/ccc/blob/68d0214a778a19f04ee7c96a973749bd0d09d4d1/proofs/Unrestricted.agda">final
translation</a>
adds a <code>dup : a -&gt; a ⊗ a</code> arrow to the semicartesian monoidal category, which gets us back to a
cartesian closed category (but with a slightly different syntax) and unrestricted lambda calculus.</p>
<p>This journey lead to a style for checking lambda calculus that works for linear, affine,
and unrestricted lambda calculus. I think would be interesting to create a type checker that checks
in this style. My intuition says such a type checker might be easier to parallelise.</p>
<p>I also noticed that the <a href="https://github.com/LightAndLight/ccc/blob/68d0214a778a19f04ee7c96a973749bd0d09d4d1/proofs/Unrestricted.agda#L35-L49">CCC
syntax</a>
I settled on is explicit about parallel computations. While composition (<code>f ∘ g</code>) can be thought of as <code>f</code> after
<code>g</code>, the tensor operator (<code>f ⊗ g</code>) can be thought of as <code>f</code> and <code>g</code> in parallel. There’s a sense in
which this CCC syntax “reveals” parallelism that’s inherient in the lambda calculus. I’m curious
what it would be like to write a multi-core parallel evaluator based on this.</p>
<h2 id="march"><code>march</code></h2>
<p><em>June</em></p>
<p><a href="https://github.com/LightAndLight/march" class="uri">https://github.com/LightAndLight/march</a></p>
<p>I wanted to check for broken local links markdown documents, and create
a “move” command that works like <code>mv</code> but also renames links. I finished the former but not the latter.</p>
<h2 id="bidirectional-typechecking-with-unification"><code>bidirectional-typechecking-with-unification</code></h2>
<p><em>June</em></p>
<p><a href="https://github.com/LightAndLight/bidirectional-typechecking-with-unification" class="uri">https://github.com/LightAndLight/bidirectional-typechecking-with-unification</a></p>
<p>This work was inspired by <a href="https://www.haskellforall.com/2022/06/the-appeal-of-bidirectional-type.html">an article about the limitations of unification-based type
checking</a>. It seemed to
claim that <a href="https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system">Hindley-Milner</a> / unification-based type checking is very limited, and presented a
dichotomy between bidirectional typing and unification that I don’t agree with.</p>
<p>I wrote a Hindley-Milner-based type checker for a language with subtyping by applying bidirectional
principles. It has higher-rank polymorphism, existential types, optional record fields, and default
record fields, which are all powered by the same subtyping mechanism. Unification and instantiation
are also performed by the subtyping mechanism.</p>
<p>The key insight is to allow the subtyping check to transform terms. A type <code>A</code> is a subtype of <code>B</code>
when values of type <code>A</code> can be used where values of type <code>B</code> are expected. This is often written as
<code>A :&gt; B</code>, and in code as something like <code>isSubtypeOf : Type -&gt; Type -&gt; Bool</code>. My type checker
returns evidence that the subtyping relation holds, which could be written as
<code>(a : A) :&gt; B  ~&gt; b</code>, and as a function: <code>isSubtypeOf : (Expr, Type) -&gt; Type -&gt; Maybe Expr</code>. The
bidirectional style means ensures that “checking” types drives subtyping. This is
all perfectly compatible with unification-based inference.</p>
<p>This deserves a much clearer explanation in its own blog post. I think it’s a promising result
for programming language design.</p>
<h2 id="little"><code>little</code></h2>
<p><em>June / July</em></p>
<p><a href="https://github.com/LightAndLight/little" class="uri">https://github.com/LightAndLight/little</a></p>
<p><code>little</code> is my first attempt at a <a href="https://doi.org/10.1093/comjnl/27.2.97">Knuth-style literate
programming</a> system. I want to write documents about code
that are also the source truth for the code. Systems like <a href="https://www.haskell.org/onlinereport/literate.html">literate Haskell</a> are unsatisfying
to me because I have to present the code to the reader in the same order that the code appears
in the source file. For example, all literate Haskell articles will begin with a preamble of imports
(<a href="https://blog.ielliott.io/continuations-from-the-ground-up/">example article</a>). I want to present
code to the reader in a non-linear fashion, in a way that supports my explanation. I imagine that
I’d often put import declarations in an appendix, for instance.</p>
<p><code>little doc</code> generates a document that I can publish on
the web, and <code>little code</code> generates the codebase that is described in the document. Another fun use
case is “self-documenting shell scripts”
(<a href="https://github.com/LightAndLight/little/blob/main/examples/script.lit">example</a>). Rather than
commenting a bash script, you can write a literate document that describes a bash script, and give
the document a shebang line.</p>
<p><code>little</code> uses XML for its markup, so that I can use whatever “presentation” markup I want (Markdown,
LaTex, HTML, etc.). I was surprised by how “not terrible” it felt to use XML for this. I have a
strong bias against XML in general, and now that bias has gained some nuance. XML feels alright for
<em>markup</em>, that is, for extra information in documents that are mostly text which
people will consume by reading. That’s what it was designed for; it’s the eXtensible <em>Markup</em>
Language. What I now object to is the use of XML as a data format.
<a href="https://www.devever.net/~hl/xml">This article</a> has a good heuristic for distinguishing the two uses: if
you remove all the tags from your XML document, will it still make sense to a reader? I’ve tried to
apply this heuristic to the syntax of <code>little</code>.</p>
<p>The code is pretty crappy, so if I continued to work on this I’d rewrite it. I’m optimistic about
what I created so far, though.</p>
<h2 id="mininix"><code>mininix</code></h2>
<p><em>August</em></p>
<p><a href="https://github.com/LightAndLight/mininix" class="uri">https://github.com/LightAndLight/mininix</a></p>
<p><code>mininix</code> is an attempt at understanding how Nix-style build systems work by writing a small one. It
includes a content-addressable store, a build database (using sqlite), a parallel build executor and a typed build language.</p>
<p>I also wanted to improve on the naming of concepts (i.e. use a better word than “derivation”), and
to keep typeability in mind from the start (Nix is very very untyped. Would types affect the build
system’s design?).</p>
<p>One idea I’d like to explore here is a sort of “local” version of Nix. Instead of having a global
store, have a per-project store for build artifacts similar to <code>cabal</code>’s <code>dist[-newstyle]</code>
directories and
<code>cargo</code>’s <code>target</code> directory.</p>
<p>I’m also interested in whether we can have build systems that reuse existing package declarations.
For example, if you want to use Nix to package a Haskell project, you need to convert your
<code>.cabal</code> file to a Nix expression (or do <a href="https://nixos.wiki/wiki/Import_From_Derivation">import from
derivation</a>, which I fundamentally disagree with).
What if there was a way to use the <code>.cabal</code> file without the grossness of import-from-derivation?</p>
<h2 id="top-down-hindley-milner"><code>top-down-hindley-milner</code></h2>
<p><em>September</em></p>
<p><a href="https://github.com/LightAndLight/top-down-hindley-milner" class="uri">https://github.com/LightAndLight/top-down-hindley-milner</a></p>
<p>This project shows a sort of “upside down” approach to Hindley-Milner type inference.
This work was inspired by some inaccurate type errors that <code>ipso</code> generated, and this algorithm is
my solution.</p>
<p><a href="https://ncatlab.org/nlab/show/bidirectional+typechecking">Bidirectional type
checking</a> separates inference from
checking, and this distinction is important in contrasting “normal” Hindley-Milner to the “top-down”
approach. Roughly speaking, Hindley-Milner constructs types through inference in a bottom-up
manner, and my algorithm refines types through checking from the top down.</p>
<p>In Hindley-Milner, all the work is done by inference and checking is the trivial case of
inference followed by unification with an expected type. In the “top-down” style, checking does all
the work, and inference is performed by checking against a fresh metavariable.</p>
<p>I want to combine this work with <a href="#bidirectional-typechecking-with-unification">the subtyping work</a> I mentioned earier.</p>
<h2 id="hover-pill"><code>hover-pill</code></h2>
<p><em>October</em></p>
<p><a href="https://github.com/LightAndLight/hover-pill" class="uri">https://github.com/LightAndLight/hover-pill</a></p>
<p><code>hover-pill</code> is a game I created to learn the <a href="https://bevyengine.org/">Bevy</a> game engine. You can
try an early build <a href="https://blog.ielliott.io/hover-pill/">here</a>. It’s a 3D puzzle/platformer where
you fly around as a capsule-shaped object (I’m not a 3D artist) trying to reach the green goal square.</p>
<p>I haven’t done any game development for years, so this project was very refreshing. Once I had
all the mechanics working, I asked my girlfriend to test the levels I designed. Each time
she completed a level, I created a slightly more difficult one. She enjoyed playing it, and I’m glad that in the end I created
something fun.</p>
<p>Bevy uses <a href="https://wgpu.rs/"><code>wgpu</code></a> for graphics, which combined with Rusts awesome
cross-compilation support means it was pretty easy for me to develop on my desktop (with x86_64 and Vulkan), and
then compile a WASM and WebGL version for the web. It was a pleasant surprise, coming from Haskell
and GHCJS.</p>
<p>This was my first time using an
<a href="https://en.wikipedia.org/wiki/Entity_component_system">entity-component-system</a> framework, and I
enjoyed it. <a href="https://dataorienteddesign.com/dodbook/">Data-Oriented Design</a> helped me understand the
history behind the patterns. I think there are ideas here that apply outside of game development,
but I don’t know what they are yet. On example (and I think it’s where I learned about the DoD book)
is <a href="https://ziglang.org/download/0.8.0/release-notes.html#Reworked-Memory-Layout">this</a> explanation
of a “data-oriented” performance improvement in the Zig compiler.</p>
<h2 id="wgpu-mandelbrot"><code>wgpu-mandelbrot</code></h2>
<p><em>October</em></p>
<p><a href="https://github.com/LightAndLight/wgpu-mandelbrot" class="uri">https://github.com/LightAndLight/wgpu-mandelbrot</a></p>
<p><img src="https://github.com/LightAndLight/wgpu-mandelbrot/raw/main/images/screenshot-2.png"
width="100%" /></p>
<p>After <a href="#hover-pill">hover-pill</a> I wanted to learn more about graphics APIs and GPU programming. I realised that computing the mandelbrot set was an
“embarrassingly parallel” problem, so it would be a good fit for GPU programming.</p>
<p>The mandelbrot renderer runs in realtime. It has a satisfying “blooming” effect as the iteration
count ticks up and more points are coloured. The mandelbrot
calculations are performed in a compute shader, and the colours are assigned using a
<a href="https://en.wikipedia.org/wiki/Plotting_algorithms_for_the_Mandelbrot_set#Histogram_coloring">histogram algorithm</a>
on the CPU. I couldn’t figure out how to do histogram colouring on the GPU.</p>
<p>To make sense of the WebGPU API, I created this diagram which displays all relevant (Web)GPU
resources and their relationships:</p>
<iframe style="border: 1px solid rgba(0, 0, 0, 0.1);" width="800" height="450" src="https://www.figma.com/embed?embed_host=share&amp;url=https%3A%2F%2Fwww.figma.com%2Ffile%2FIr3gsGIELdVBwYgVkCiHvE%2Fwebgpu%3Fnode-id%3D0%253A1%26t%3DUIEhGQEzO3ObVrhi-1" allowfullscreen>
</iframe>
<p>I have a much better sense of GPU programming fundamentals, and I think the careful design of WebGPU helped.
It’s higher level than Vulkan, but more explicit than OpenGL. I’ve done a Vulkan tutorial and forgot
almost all of it. Having learned the fundamentals <code>wgpu</code>, I think the Vulkan API would make a lot more sense
to me now.</p>
<h2 id="hedge"><code>hedge</code></h2>
<p><em>December</em></p>
<p><a href="https://github.com/LightAndLight/hedge" class="uri">https://github.com/LightAndLight/hedge</a></p>
<p><code>hedge</code> is a library that makes it easier for me to write web information systems with Haskell. I’ve
been developing a sense of style and a set of patterns around writing Haskell web apps,
in particular
using <a href="https://hackage.haskell.org/package/servant">servant</a> and focusing on server-side rendered resources, and <code>hedge</code> is
kind of my “kitchen sink” for things that support the style.</p>
<p>I might create a command-line program for setting up a new project, adding endpoints, and other
forms of boilerplate I find.</p>
<p>I’m not sure if it will ever lead to something I could call a “framework”, like
<a href="https://rubyonrails.org/">Rails</a>. Right now I have the sense that it would be more like a <a href="https://en.wikipedia.org/wiki/A_Pattern_Language">pattern
language</a> with automated helpers.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>that made it onto GitHub<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]>
    </content>
    
</entry><entry>
    <title>RIP Dream.In.Code</title>
    <link href="https://blog.ielliott.io/rip-dreamincode" />
    
    <id>https://blog.ielliott.io/rip-dreamincode</id>
    
    <published>2022-07-06T00:00:00Z</published>
    <updated>2023-05-01T10:23+00:00</updated>
    <summary type="html"><![CDATA[<p><a href="https://web.archive.org/web/20220105235917/https://www.dreamincode.net/">Dream.In.Code</a> was a
programming help forum that ran from 2001 to the beginning of 2022. It was recently <a href="https://web.archive.org/web/20220116161045/https://www.dreamincode.net/forums/topic/421898-dreamincode-shutting-down/">shut
down</a>
due to hosting costs. My participation in Dream.In.Code, starting from 2009 and ending somewhere in
2013, represents the beginning of my life as a programmer. Over the past 10 or so years, programming
has become a <em>huge</em> part of my life. I’d like to acknowledge the role this forum played in my development.</p>]]></summary>
    
    <content type="html" xml:base="https://blog.ielliott.io/rip-dreamincode">
      <![CDATA[<p><a href="https://web.archive.org/web/20220105235917/https://www.dreamincode.net/">Dream.In.Code</a> was a
programming help forum that ran from 2001 to the beginning of 2022. It was recently <a href="https://web.archive.org/web/20220116161045/https://www.dreamincode.net/forums/topic/421898-dreamincode-shutting-down/">shut
down</a>
due to hosting costs. My participation in Dream.In.Code, starting from 2009 and ending somewhere in
2013, represents the beginning of my life as a programmer. Over the past 10 or so years, programming
has become a <em>huge</em> part of my life. I’d like to acknowledge the role this forum played in my development.</p>
<p>Dream.In.Code has been thoroughly archived on web.archive.org, so I scraped
the archives for my old posts. I was quite surprised by what I found.</p>
<p>I had forgotten how much of a beginner I was when I started posting there.
My initial posts
were variations of “I wrote this code and it doesn’t work and I don’t know why. Help?”
I could barely ask a coherent question.
Later, my questions became more targeted, like “How do I update all the items in an array?”
It was sobering to be reminded of a time when I didn’t know what a <code>for</code> loop was, and didn’t really
know how to figure it out for myself.</p>
<p>What left an even stronger impression was the quality of answers I recieved. Every question I asked
recieved patient, respectful responses. No one complained about my writing style (I was 13 at the time, and re-reading
these posts caused some eye-rolls). No one berated me when I left out helpful debugging information
like log files or compiler errors. No one made me feel bad for asking
questions. I think this was the best possible start I could have asked for. I’m not sure where
someone would go in 2022 for the same experience. Probably not Reddit or StackOverflow.</p>
<p>When I was learning to code, I had no one to turn to “in real life”. Posting a code snippet to a
forum and asking, “pls halp” was all I could do. The members of Dream.In.Code turned that into a
positive, constructive experience.</p>
<p>Thanks, Dream.In.Code</p>]]>
    </content>
    
</entry><entry>
    <title>WebGL Slower Than Canvas?</title>
    <link href="https://blog.ielliott.io/webgl-slower-than-canvas" />
    
    <id>https://blog.ielliott.io/webgl-slower-than-canvas</id>
    
    <published>2021-05-20T00:00:00Z</published>
    <updated>2023-05-01T10:23+00:00</updated>
    <summary type="html"><![CDATA[<p>I’ve recently been working on <a href="https://github.com/LightAndLight/rust-wasm-gol/">web a graphics project</a>
where I played a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API">Canvas API</a> implementation
against a <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL</a> implementation. When running the app in Firefox on Linux, I was surprised to find that the WebGL version was 10-30% <em>slower</em>
(in frames per second) than the Canvas version.</p>]]></summary>
    
    <content type="html" xml:base="https://blog.ielliott.io/webgl-slower-than-canvas">
      <![CDATA[<p>I’ve recently been working on <a href="https://github.com/LightAndLight/rust-wasm-gol/">web a graphics project</a>
where I played a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API">Canvas API</a> implementation
against a <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL</a> implementation. When running the app in Firefox on Linux, I was surprised to find that the WebGL version was 10-30% <em>slower</em>
(in frames per second) than the Canvas version.</p>
<p>After much searching I was able to diagnose and fix the problem, which came
down to graphics drivers and browser rendering settings. If your problem is
similar to mine, here’s how you might be able to solve it:</p>
<ol type="1">
<li><p>Check GPU driver status in the browser.</p>
<p>In Firefox, navigate to <code>about:support</code>. <code>Ctrl+F Graphics</code>. Look at the <code>WebGL 1 Driver {Renderer,Version}</code>
rows. If you don’t see your GPU manufacturer and model in these rows, then you need to install
the correct drivers.</p>
<p>For reference, I’m running a Nvidia GeForce RTX2070. Without drivers, my driver renderer was <code>VMware, Inc. -- llvmpipe (LLVM 9.0.1, 256 bits)</code>
and my driver version was <code>3.1 Mesa 20.1.10</code>.</p></li>
<li><p>Install GPU drivers.</p>
<p>I’m on NixOS, so this was as simple as adding</p>
<pre><code>nixpkgs.config.allowUnfree = true;
services.xserver.videoDrivers = [ &quot;nvidia&quot; ];</code></pre>
<p>to my <code>configuration.nix</code>, then running <code>sudo nixos-rebuild switch &amp;&amp; reboot</code>.</p></li>
<li><p>Confirm driver installation.</p>
<p>Repeat step 1. If you still can’t see your GPU manufacturer and model, then I can’t help you.</p>
<p>After step 2, my driver renderer was <code>NVIDIA Corporation -- GeForce RTX 2070/PCIe/SSE2</code> and driver version was
<code>4.6.0 NVIDIA 455.38</code>.</p></li>
<li><p>Enable <a href="https://hacks.mozilla.org/2017/10/the-whole-web-at-maximum-fps-how-webrender-gets-rid-of-jank/">WebRender</a>.</p>
<p>In the Graphics section of <code>about:support</code>, check the <code>Compositing</code> row. If it says <code>WebRender</code>, then you’re
done. If it says <code>Basic</code>, then you need to enable WebRender.</p>
<p>Navigate to <code>about:config</code>, move past the warning, and search for <code>gfx.webrender.enabled</code>. Set it to <code>true</code> and
restart Firefox. Confirm this change by checking <code>Compositing</code> row in <code>about:support</code>.</p></li>
</ol>
<p>Before, each <a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame">requestAnimationFrame</a> call
lasted 14-15ms in my Canvas implementation, but the app was running well below 60fps. Each frame lasted ~10ms in my WebGL implementation,
but the framerate was even worse than the Canvas version!</p>
<p>After following these instructions, both my Canvas implementation and WebGL implementation run at 60fps. Canvas’ frame
duration didn’t appear to change, but WebGL’s frame duration dropped to ~4ms. Yay!</p>]]>
    </content>
    
</entry><entry>
    <title>An Example of Defunctionalisation in Rust</title>
    <link href="https://blog.ielliott.io/rust-defun-example" />
    
    <id>https://blog.ielliott.io/rust-defun-example</id>
    
    <published>2021-02-06T00:00:00Z</published>
    <updated>2023-05-01T10:23+00:00</updated>
    <summary type="html"><![CDATA[<p>I’m an experienced Haskell programmer, and I’ve been writing a lot of Rust lately.
I recently ran into a little trouble when porting a simple function from Haskell to
Rust. This article is a short description of my journey.</p>]]></summary>
    
    <content type="html" xml:base="https://blog.ielliott.io/rust-defun-example">
      <![CDATA[<p>I’m an experienced Haskell programmer, and I’ve been writing a lot of Rust lately.
I recently ran into a little trouble when porting a simple function from Haskell to
Rust. This article is a short description of my journey.</p>
<hr />
<p><a href="https://en.wikipedia.org/wiki/De_Bruijn_index">De Bruijn indexed</a> terms are
<a href="https://en.wikipedia.org/wiki/Functor">functorial</a> in their free variables.
This means that given a datatype <code>Expr</code>, we can write a function
<code>map_freevars : (Int -&gt; Int) -&gt; Expr -&gt; Expr</code> such that <code>map_freevars id == id</code>
and <code>map_freevars f ∘ map_freevars g == map_freevars (f ∘ g)</code>. In Haskell, I’d
implement this as follows:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Expr</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> <span class="dt">Var</span> <span class="dt">Int</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">App</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">Lam</span> <span class="dt">Expr</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  </span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="ot">map_freevars ::</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>) <span class="ot">-&gt;</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>map_freevars f e <span class="ot">=</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">case</span> e <span class="kw">of</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Var</span> n <span class="ot">-&gt;</span> <span class="dt">Var</span> (f n)</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">App</span> a b <span class="ot">-&gt;</span> <span class="dt">App</span> (map_freevars f a) (map_freevars f b)</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Lam</span> b <span class="ot">-&gt;</span> <span class="dt">Lam</span> (map_freevars (\n <span class="ot">-&gt;</span> <span class="kw">if</span> n <span class="op">==</span> <span class="dv">0</span> <span class="kw">then</span> <span class="dv">0</span> <span class="kw">else</span> <span class="dv">1</span> <span class="op">+</span> f (n <span class="op">-</span> <span class="dv">1</span>)) b)</span></code></pre></div>
<p>Now, here’s a direct translation from Haskell to Rust:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">enum</span> Expr <span class="op">{</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    Var(<span class="dt">usize</span>)<span class="op">,</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    App(<span class="dt">Box</span><span class="op">&lt;</span>Expr<span class="op">&gt;,</span> <span class="dt">Box</span><span class="op">&lt;</span>Expr<span class="op">&gt;</span>)<span class="op">,</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    Lam(<span class="dt">Box</span><span class="op">&lt;</span>Expr<span class="op">&gt;</span>)<span class="op">,</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> map_freevars<span class="op">&lt;</span>F<span class="op">:</span> <span class="bu">Fn</span>(<span class="dt">usize</span>) <span class="op">-&gt;</span> <span class="dt">usize</span><span class="op">&gt;</span>(f<span class="op">:</span> F<span class="op">,</span> e<span class="op">:</span> <span class="op">&amp;</span>Expr) <span class="op">-&gt;</span> Expr <span class="op">{</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">match</span> e <span class="op">{</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Expr::</span>Var(n) <span class="op">=&gt;</span> <span class="pp">Expr::</span>Var(f(<span class="op">*</span>n))<span class="op">,</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Expr::</span>App(a<span class="op">,</span> b) <span class="op">=&gt;</span> <span class="pp">Expr::</span>App(<span class="dt">Box</span><span class="pp">::</span>new(map_freevars(f<span class="op">,</span> a))<span class="op">,</span> <span class="dt">Box</span><span class="pp">::</span>new(map_freevars(f<span class="op">,</span> b)))<span class="op">,</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Expr::</span>Lam(b) <span class="op">=&gt;</span> <span class="pp">Expr::</span>Lam(<span class="dt">Box</span><span class="pp">::</span>new(map_freevars(</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span>n<span class="op">|</span> <span class="op">{</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> n <span class="op">==</span> <span class="dv">0</span> <span class="op">{</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>                    <span class="dv">0</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>                    <span class="dv">1</span> <span class="op">+</span> f(n <span class="op">-</span> <span class="dv">1</span>)</span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>            <span class="op">},</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>            b</span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>        )))<span class="op">,</span></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This doesn’t typecheck because the call to <code>map_freevars(f, a)</code> takes ownership of <code>f</code>,
which means <code>f</code> can no longer be used in the call to <code>map_freevars(f, b)</code>.</p>
<p>To avoid this, <code>map_freevars</code> should <em>borrow</em> the mapping function:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> map_freevars<span class="op">&lt;</span>F<span class="op">:</span> <span class="bu">Fn</span>(<span class="dt">usize</span>) <span class="op">-&gt;</span> <span class="dt">usize</span><span class="op">&gt;</span>(f<span class="op">:</span> <span class="op">&amp;</span>F<span class="op">,</span> e<span class="op">:</span> <span class="op">&amp;</span>Expr) <span class="op">-&gt;</span> Expr <span class="op">{</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">match</span> e <span class="op">{</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Expr::</span>Var(n) <span class="op">=&gt;</span> <span class="pp">Expr::</span>Var(f(<span class="op">*</span>n))<span class="op">,</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Expr::</span>App(a<span class="op">,</span> b) <span class="op">=&gt;</span> <span class="pp">Expr::</span>App(<span class="dt">Box</span><span class="pp">::</span>new(map_freevars(f<span class="op">,</span> a))<span class="op">,</span> <span class="dt">Box</span><span class="pp">::</span>new(map_freevars(f<span class="op">,</span> b)))<span class="op">,</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Expr::</span>Lam(b) <span class="op">=&gt;</span> <span class="pp">Expr::</span>Lam(<span class="dt">Box</span><span class="pp">::</span>new(map_freevars(</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>            <span class="op">&amp;|</span>n<span class="op">|</span> <span class="op">{</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> n <span class="op">==</span> <span class="dv">0</span> <span class="op">{</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>                    <span class="dv">0</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>                    <span class="dv">1</span> <span class="op">+</span> f(n <span class="op">-</span> <span class="dv">1</span>)</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>            <span class="op">},</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>            b</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>        )))<span class="op">,</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>But this doesn’t compile either! The Rust compiler reports
that it <code>reached the recursion limit while instantiating map_freevars::&lt;[closure@...]&gt;</code>.
Rust generates all its closures at compile time, and this code causes the compiler to
generate a countably infinite number of closures.</p>
<p>For every known closure that is passed to <code>map_freevars</code> as <code>f</code>, Rust generates another
closure for <code>|n| if n == 0 { 0 } else { 1 + f(n - 1) } }</code>. But <code>|n| if n == 0 { 0 } else { 1 + f(n - 1) } }</code>
is also passed to <code>map_freevars</code>, so another closure needs to be generated. And <em>that</em> closure is
also passed to <code>map_freevars</code>, so another closure needs to be generated. And so on.</p>
<p>The next natural step is to use a <a href="https://doc.rust-lang.org/book/ch17-02-trait-objects.html">trait object</a>.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> map_freevars(f<span class="op">:</span> <span class="op">&amp;</span><span class="kw">dyn</span> <span class="bu">Fn</span>(<span class="dt">usize</span>) <span class="op">-&gt;</span> <span class="dt">usize</span><span class="op">,</span> e<span class="op">:</span> <span class="op">&amp;</span>Expr) <span class="op">-&gt;</span> Expr <span class="op">{</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">match</span> e <span class="op">{</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Expr::</span>Var(n) <span class="op">=&gt;</span> <span class="pp">Expr::</span>Var(f(<span class="op">*</span>n))<span class="op">,</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Expr::</span>App(a<span class="op">,</span> b) <span class="op">=&gt;</span> <span class="pp">Expr::</span>App(<span class="dt">Box</span><span class="pp">::</span>new(map_freevars(f<span class="op">,</span> a))<span class="op">,</span> <span class="dt">Box</span><span class="pp">::</span>new(map_freevars(f<span class="op">,</span> b)))<span class="op">,</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Expr::</span>Lam(b) <span class="op">=&gt;</span> <span class="pp">Expr::</span>Lam(<span class="dt">Box</span><span class="pp">::</span>new(map_freevars(</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>            <span class="op">&amp;|</span>n<span class="op">|</span> <span class="op">{</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> n <span class="op">==</span> <span class="dv">0</span> <span class="op">{</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>                    <span class="dv">0</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>                    <span class="dv">1</span> <span class="op">+</span> f(n <span class="op">-</span> <span class="dv">1</span>)</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>            <span class="op">},</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>            b</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>        )))<span class="op">,</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>A <code>&amp;dyn</code> reference is a pair of pointers; one pointer to a value of a type that implements the trait,
and another pointer to the implementation of the trait for that type<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>.</p>
<p>This code is perfectly usable, and I’d guess it’s the ‘idiomatic’ Rust solution. But there’s one final
step I’d like to take, mostly for educational perposes, and for a small efficiency gain.</p>
<p>For all intents and purposes, there are only two possible ‘origins’ for <code>f</code>:</p>
<ol type="1">
<li>It was passed to <code>map_freevars</code> unchanged, either from a top-level call or from a recursive call at an
<code>App</code> node</li>
<li>It was wrapped in a closure before being passed to <code>map_freevars</code> at a <code>Lam</code> node</li>
</ol>
<p>This structure is described by the following datatype:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">enum</span> Origin<span class="op">&lt;</span><span class="ot">&#39;a</span><span class="op">,</span> F<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    Unchanged(F)<span class="op">,</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    LamNode(<span class="op">&amp;</span><span class="ot">&#39;a</span> Origin<span class="op">&lt;</span><span class="ot">&#39;a</span><span class="op">,</span> F<span class="op">&gt;</span>)</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The <code>Origin</code> datatype can be interpreted as a function from <code>usize</code> to <code>usize</code>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">impl</span> <span class="op">&lt;</span><span class="ot">&#39;a</span><span class="op">,</span> F<span class="op">:</span> <span class="bu">Fn</span>(<span class="dt">usize</span>) <span class="op">-&gt;</span> <span class="dt">usize</span><span class="op">&gt;</span> Origin<span class="op">&lt;</span><span class="ot">&#39;a</span><span class="op">,</span> F<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">fn</span> apply(<span class="op">&amp;</span><span class="kw">self</span><span class="op">,</span> n<span class="op">:</span> <span class="dt">usize</span>) <span class="op">-&gt;</span> <span class="dt">usize</span> <span class="op">{</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">match</span> <span class="kw">self</span> <span class="op">{</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Origin::</span>Unchanged(f) <span class="op">=&gt;</span> f(n)<span class="op">,</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Origin::</span>LamNode(f) <span class="op">=&gt;</span> <span class="cf">if</span> n <span class="op">==</span> <span class="dv">0</span> <span class="op">{</span> <span class="dv">0</span> <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span> <span class="dv">1</span> <span class="op">+</span> f<span class="op">.</span>apply(n<span class="op">-</span><span class="dv">1</span>) <span class="op">}</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><em>Challenge: implement <code>Origin::apply</code> using constant stack space.</em></p>
<p>Now the <code>Origin::LamNode</code> constructor replaces the fresh closure in the <code>Lam</code> branch:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> map_freevars<span class="op">&lt;</span><span class="ot">&#39;a</span><span class="op">,</span> F<span class="op">:</span> <span class="bu">Fn</span>(<span class="dt">usize</span>) <span class="op">-&gt;</span> <span class="dt">usize</span><span class="op">&gt;</span>(f<span class="op">:</span> <span class="op">&amp;</span><span class="ot">&#39;a</span> Origin<span class="op">&lt;</span><span class="ot">&#39;a</span><span class="op">,</span> F<span class="op">&gt;,</span> e<span class="op">:</span> <span class="op">&amp;</span>Expr) <span class="op">-&gt;</span> Expr <span class="op">{</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">match</span> e <span class="op">{</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Expr::</span>Var(n) <span class="op">=&gt;</span> <span class="pp">Expr::</span>Var(f<span class="op">.</span>apply(<span class="op">*</span>n))<span class="op">,</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Expr::</span>App(a<span class="op">,</span> b) <span class="op">=&gt;</span> <span class="pp">Expr::</span>App(<span class="dt">Box</span><span class="pp">::</span>new(map_freevars(f<span class="op">,</span> a))<span class="op">,</span> <span class="dt">Box</span><span class="pp">::</span>new(map_freevars(f<span class="op">,</span> b)))<span class="op">,</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Expr::</span>Lam(b) <span class="op">=&gt;</span> <span class="pp">Expr::</span>Lam(<span class="dt">Box</span><span class="pp">::</span>new(map_freevars(<span class="op">&amp;</span><span class="pp">Origin::</span>LamNode(f))))<span class="op">,</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This transformation is an example of <a href="https://en.wikipedia.org/wiki/Defunctionalization">defunctionalisation</a>.</p>
<p>Here, the practical benefit is that <code>&amp;Origin</code> is half the size of a <code>&amp;dyn Fn(usize) -&gt; usize</code> (a single pointer
instead of two), so recursing over a <code>Lam</code> node uses less stack space.</p>
<p>The interface to <code>map_freevars</code> can then be cleaned up using the worker/wrapper pattern:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> map_freevars<span class="op">&lt;</span>F<span class="op">:</span> <span class="bu">Fn</span>(<span class="dt">usize</span>) <span class="op">-&gt;</span> <span class="dt">usize</span><span class="op">&gt;</span>(f<span class="op">:</span> F<span class="op">,</span> e<span class="op">:</span> <span class="op">&amp;</span>Expr) <span class="op">-&gt;</span> Expr <span class="op">{</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">fn</span> go<span class="op">&lt;</span><span class="ot">&#39;a</span><span class="op">,</span> F<span class="op">:</span> <span class="bu">Fn</span>(<span class="dt">usize</span>) <span class="op">-&gt;</span> <span class="dt">usize</span><span class="op">&gt;</span>(f<span class="op">:</span> <span class="op">&amp;</span><span class="ot">&#39;a</span> Origin<span class="op">&lt;</span><span class="ot">&#39;a</span><span class="op">,</span> F<span class="op">&gt;,</span> e<span class="op">:</span> <span class="op">&amp;</span>Expr) <span class="op">-&gt;</span> Expr <span class="op">{</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">match</span> e <span class="op">{</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Expr::</span>Var(n) <span class="op">=&gt;</span> <span class="pp">Expr::</span>Var(f<span class="op">.</span>apply(<span class="op">*</span>n))<span class="op">,</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Expr::</span>App(a<span class="op">,</span> b) <span class="op">=&gt;</span> <span class="pp">Expr::</span>App(<span class="dt">Box</span><span class="pp">::</span>new(go(f<span class="op">,</span> a))<span class="op">,</span> <span class="dt">Box</span><span class="pp">::</span>new(go(f<span class="op">,</span> b)))<span class="op">,</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Expr::</span>Lam(b) <span class="op">=&gt;</span> <span class="pp">Expr::</span>Lam(<span class="dt">Box</span><span class="pp">::</span>new(go(<span class="op">&amp;</span><span class="pp">Origin::</span>LamNode(f))))<span class="op">,</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>    go(<span class="op">&amp;</span><span class="pp">Origin::</span>Unchanged(f)<span class="op">,</span> e)</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<hr />
<p>I haven’t benchmarked the defunctionalised approach and compared it against the trait object
implementation. If anyone has suggestions for easily measuring the time and memory usage of
Rust programs, preferably by function, then please let me know.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>This is a form of existential quantification. The Haskell equivalent looks something like
<code>data Some (c :: Constraint) where; Some :: c a =&gt; a -&gt; Some c</code><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]>
    </content>
    
</entry><entry>
    <title>Docker Cleanup Commands</title>
    <link href="https://blog.ielliott.io/docker-cleanup-commands" />
    
    <id>https://blog.ielliott.io/docker-cleanup-commands</id>
    
    <published>2020-11-07T00:00:00Z</published>
    <updated>2023-05-01T10:23+00:00</updated>
    <summary type="html"><![CDATA[<p>I’ve Googled this one too many times, so I’m writing it here for future reference.</p>]]></summary>
    
    <content type="html" xml:base="https://blog.ielliott.io/docker-cleanup-commands">
      <![CDATA[<p>I’ve Googled this one too many times, so I’m writing it here for future reference.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">#! /usr/bin/env bash</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="co"># remove containers</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="ex">docker</span> ps <span class="at">--all</span> <span class="at">--format</span> <span class="st">&quot;{%raw%}{{.ID}}{%endraw%}&quot;</span> <span class="kw">|</span> <span class="fu">xargs</span> docker rm</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="co"># remove images</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="ex">docker</span> images <span class="at">--format</span> <span class="st">&quot;{%raw%}{{.ID}}{%endraw%}&quot;</span> <span class="kw">|</span> <span class="fu">xargs</span> docker rmi <span class="at">-f</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="co"># remove volumes</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="ex">docker</span> volume prune</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="co"># remove build cache</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="ex">docker</span> builder prune</span></code></pre></div>]]>
    </content>
    
</entry><entry>
    <title>Statically Sized Higher-kinded Polymorphism</title>
    <link href="https://blog.ielliott.io/sized-hkts" />
    
    <id>https://blog.ielliott.io/sized-hkts</id>
    
    <published>2020-07-07T00:00:00Z</published>
    <updated>2023-05-01T10:23+00:00</updated>
    <summary type="html"><![CDATA[<p>
  Memory-sensitive languages like C++ and Rust use compile-time information to calculate
  sizes of datatypes. These sizes are used to inform alignment, allocation, and calling conventions in ways
  that improve runtime performance. Modern languages in this setting support generic types, but so far
  these languages only allow parameterisation over types, not type constructors. In this article I describe
  how to enable parameterisation over arbitrary type constructs, while still retaining compile-time calculation
  of datatype sizes.
</p>]]></summary>
    
    <content type="html" xml:base="https://blog.ielliott.io/sized-hkts">
      <![CDATA[<div class="intro-wrapper">
<div>
<p>Memory-sensitive languages like C++ and Rust use compile-time information to calculate
sizes of datatypes. These sizes are used to inform alignment, allocation, and calling conventions in ways
that improve runtime performance. Modern languages in this setting support generic types, but so far
these languages only allow parameterisation over types, not type constructors. In this article I describe
how to enable parameterisation over arbitrary type constructs, while still retaining compile-time calculation
of datatype sizes.</p>
<p>The code for this project can be found <a href="https://github.com/LightAndLight/sized-hkts">here</a>.</p>
</div>
<div class="contents-wrapper">
<div class="contents">
<h3>
Contents
</h3>
<ul style="list-style-type: none; padding-left: 0;">
<li>
<a href="#background">Background</a>
</li>
<ul style="list-style-type: none; padding-left: 1em;">
<li>
<a href="#generics">Generics</a>
</li>
<li>
<a href="#sizing">Sizing</a>
</li>
<li>
<a href="#kinds">Kinds</a>
</li>
<li>
<a href="#type-classes">Type Classes</a>
</li>
<li>
<a href="#problem-statement">Problem Statement</a>
</li>
</ul>
<li>
<a href="#solution">Solution</a>
</li>
<li>
<a href="#conclusion">Conclusion</a>
</li>
<li>
<a href="#references">References</a>
</li>
</ul>
</div>
</div>
</div>
<h2 id="background">Background</h2>
<h3 id="generics">Generics</h3>
<p>Many typed languages support some form of generic (parameterised) datatypes. This ability to abstract
over types is known as ‘parametric polymorphism’ (polymorphism for short). In Rust, for example, one
can define type of polymorphic pairs as <code>struct Pair&lt;A, B&gt;(fst: A, snd: B)</code>. In this definition, <code>A</code> and <code>B</code> are type
variables (or type parameters), and can be substituted for other types:
<code>Pair&lt;bool, bool&gt;</code>, <code>Pair&lt;bool, char&gt;</code>, and <code>Pair&lt;String, int32&gt;</code> are all valid pairs.</p>
<p>The name of a type, without any parameters, is known as a type constructor. <code>Pair</code> is not a type on its own;
<code>Pair&lt;A, B&gt;</code> (for some types <code>A</code> and <code>B</code>) is. The number of types required to ‘complete’ a type constructor is known
as its arity (so <code>Pair</code> has arity 2). The arity of a type constructor must always be respected; it’s an error to
provide greater or fewer type parameters than are expected. For example, <code>Pair&lt;bool&gt;</code> and
<code>Pair&lt;char, int32, String&gt;</code> are invalid.</p>
<h3 id="sizing">Sizing</h3>
<p>When using C++ or Rust, the compiler will calculate how many bytes of memory each datatype requires. Simple
types like <code>int32</code> and <code>bool</code> have a constant size; 4 bytes and 1 byte respectively. The size of datatypes
built using of other simple types is easy to calculate. The simplest way to calculate the size of a struct
is to sum the sizes of the fields, and the simplest way to calculate the size of an enum (or tagged union)
is to find the largest variant, and add 1 (for a tag byte). This is rarely the exact formula used by production
compilers, because they take <a href="https://en.wikipedia.org/wiki/Data_structure_alignment">alignment</a> into account.
This article will assume the simple sizing formula, because the results can easily be adapted to more nuanced
formulae.</p>
<p>The size of a datatype like <code>struct TwoInts(x: int32, y: int32)</code> is known immediately at its definition. <code>TwoInts</code>
requires 8 bytes of memory. On the other hand, the size of a generic datatype is not always known at its definition.
What is the size of <code>struct Pair&lt;A, B&gt;(fst: A, snd: B)</code>? It’s the size of <code>A</code> plus the size of <code>B</code>, for some
unknown <code>A</code> and <code>B</code>.</p>
<p>This difficulty is usually addressed by only generating code for datatypes and functions when all the generic
types have been replaced with concrete types. This process is known as monomorphisation. If the program contains a
<code>Pair(true, true)</code>, then the compiler will generate
a new type <code>struct PairBoolBool(fst: bool, snd: bool)</code> whose size is statically known. If <code>Pair(true, true)</code>
is passed to a function <code>fn swap&lt;A, B&gt;(p: Pair&lt;A, B&gt;) -&gt; Pair&lt;B, A&gt;</code>, then the compiler generates a new
function <code>fn swapBoolBool(p: PairBoolBool) -&gt; PairBoolBool</code>. Because this new function only uses types with known
sizes, the code for memory allocation and calling conventions can be generated correctly.</p>
<p>There are also generic types that <em>don’t</em> depend on the size of their parameters. An example of
this is the pointer, commonly known in Rust as <code>Box&lt;A&gt;</code>. A pointer has the same size (often 4 or 8 bytes depending
on your CPU) regardless of what it points to. But in order to allocate a new pointer, the size of the item must
be known.</p>
<p>For each generic datatype or function, the compiler keeps track of which type variables are important for sizing
calculations. The specifics of this is discussed in the <a href="#type-classes">Type Classes</a> section.</p>
<h3 id="kinds">Kinds</h3>
<p>A consequence of all this is that in these languages, type variables can only stand for types. But there
are good reasons to have type variables that stand for type constructors, too:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> One<span class="op">&lt;</span>A<span class="op">&gt;</span>(A)</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">impl</span> <span class="op">&lt;</span>A<span class="op">&gt;</span> One<span class="op">&lt;</span>A<span class="op">&gt;{</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  map<span class="op">&lt;</span>B<span class="op">,</span> F<span class="op">:</span> <span class="bu">Fn</span>(A) <span class="op">-&gt;</span> B<span class="op">&gt;</span>(<span class="kw">self</span><span class="op">,</span> f<span class="op">:</span> F) <span class="op">-&gt;</span> One<span class="op">&lt;</span>B<span class="op">&gt;</span> <span class="op">{</span> <span class="op">...</span> <span class="op">}</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> Two<span class="op">&lt;</span>A<span class="op">&gt;</span>(A<span class="op">,</span> A)</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="kw">impl</span> <span class="op">&lt;</span>A<span class="op">&gt;</span> Two<span class="op">&lt;</span>A<span class="op">&gt;{</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>  map<span class="op">&lt;</span>B<span class="op">,</span> F<span class="op">:</span> <span class="bu">Fn</span>(A) <span class="op">-&gt;</span> B<span class="op">&gt;</span>(<span class="kw">self</span><span class="op">,</span> f<span class="op">:</span> F) <span class="op">-&gt;</span> Two<span class="op">&lt;</span>B<span class="op">&gt;</span> <span class="op">{</span> <span class="op">...</span> <span class="op">}</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> Three<span class="op">&lt;</span>A<span class="op">&gt;</span>(A<span class="op">,</span> A<span class="op">,</span> A)</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="kw">impl</span> <span class="op">&lt;</span>A<span class="op">&gt;</span> Three<span class="op">&lt;</span>A<span class="op">&gt;{</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>  map<span class="op">&lt;</span>B<span class="op">,</span> F<span class="op">:</span> <span class="bu">Fn</span>(A) <span class="op">-&gt;</span> B<span class="op">&gt;</span>(<span class="kw">self</span><span class="op">,</span> f<span class="op">:</span> F) <span class="op">-&gt;</span> Three<span class="op">&lt;</span>B<span class="op">&gt;</span> <span class="op">{</span> <span class="op">...</span> <span class="op">}</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here are some 1-arity container types. The only difference between these datatypes is the number of elements
they contain. They all support a <code>map</code> operation, which applies a function to all the datatype’s elements. Functions
that use <code>map</code> need to be implemented once for each type, even when their implementations are identical:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> incrOne(x<span class="op">:</span> One<span class="op">&lt;</span>int32<span class="op">&gt;</span>) <span class="op">-&gt;</span> One<span class="op">&lt;</span>int32<span class="op">&gt;</span> <span class="op">{</span> x<span class="op">.</span>map(<span class="op">|</span>n<span class="op">|</span> n <span class="op">+</span> <span class="dv">1</span>) <span class="op">}</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> incrTwo(x<span class="op">:</span> Two<span class="op">&lt;</span>int32<span class="op">&gt;</span>) <span class="op">-&gt;</span> Two<span class="op">&lt;</span>int32<span class="op">&gt;</span> <span class="op">{</span> x<span class="op">.</span>map(<span class="op">|</span>n<span class="op">|</span> n <span class="op">+</span> <span class="dv">1</span>) <span class="op">}</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> incrThree(x<span class="op">:</span> Three<span class="op">&lt;</span>int32<span class="op">&gt;</span>) <span class="op">-&gt;</span> Three<span class="op">&lt;</span>int32<span class="op">&gt;</span> <span class="op">{</span> x<span class="op">.</span>map(<span class="op">|</span>n<span class="op">|</span> n <span class="op">+</span> <span class="dv">1</span>) <span class="op">}</span></span></code></pre></div>
<p>To remedy this, there must first be a way to abstract over the type constructors, so that the code can
be written <em>once</em> and for all:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> incr<span class="op">&lt;</span>F<span class="op">&gt;</span>(x<span class="op">:</span> F<span class="op">&lt;</span>int32<span class="op">&gt;</span>) <span class="op">-&gt;</span> F<span class="op">&lt;</span>int32<span class="op">&gt;</span> <span class="op">{</span> x<span class="op">.</span>map(<span class="op">|</span>n<span class="op">|</span> n <span class="op">+</span> <span class="dv">1</span>) <span class="op">}</span> <span class="co">// when F&lt;A&gt; has map, for all types A</span></span></code></pre></div>
<p>Then, there must be some way to rule out invalid types. For example, replacing <code>F</code> with <code>bool</code> in <code>F&lt;int32&gt;</code>
is invalid, because <code>bool&lt;int32&gt;</code> is not a type. This is the job of kinds<sup><a href="#reference-constructor-classes" id="reference-constructor-classes:1">1</a></sup>.</p>
<p>Kinds describe the ‘shape’ of types (and type constructors) in the same way that types describe the ‘shape’
of values. A type’s kind determines whether or not it takes any parameters. Here’s the syntax of kinds:</p>
<pre><code>kind ::=
  Type
  kind -&gt; kind</code></pre>
<p>Types that take no arguments (like <code>bool</code>, <code>char</code>, and <code>String</code>) have kind <code>Type</code>. Types that take one argument,
like <code>One</code>, have kind <code>Type -&gt; Type</code>. In the code for <code>incr</code> above, <code>F</code> implicitly has kind <code>Type -&gt; Type</code>. Types
that take more than one argument are represented in <a href="https://en.wikipedia.org/wiki/Currying">curried form</a>. This
means that <code>Two</code> has kind <code>Type -&gt; Type -&gt; Type</code>, not <code>(Type, Type) -&gt; Type</code>. <code>Three</code> has kind <code>Type -&gt; Type -&gt; Type -&gt; Type</code>,
and so on.</p>
<p>Curried type constructors are standard in this setting, but not <em>necessary</em>. The results in this article could
also be applied to a setting with uncurried type constructors, at cost to expressiveness or implementation complexity.</p>
<p>Kinds put types and type constructors on equal footing. For the remainder of the article, both concepts will be
referred to as types. The kind becomes the distinguishing feature. For example, “type constructor of arity 2” would
be replaced by “type of kind <code>Type -&gt; Type -&gt; Type</code>”.</p>
<p>Some final jargon: types with a kind other than <code>Type</code> are known as ‘higher-kinded types’, and parameterising
over higher-kinded types is known as ‘higher-kinded polymorphism’.</p>
<h3 id="type-classes">Type Classes</h3>
<p>Rust uses <a href="https://blog.rust-lang.org/2015/05/11/traits.html">traits</a> to coordinate sizing calculations. Each
datatype implicitly receives an implementation of the <code>Sized</code> trait, and every type variable that is relevant for
a sizing calculation is given a <code>Sized</code> bound. This means that trait resolution, an already useful feature, can
be re-used to perform size calculations.</p>
<p>Closely related to traits is the functional programming concept of type classes<sup><a href="#reference-constructor-classes" id="reference-constructor-classes:2">1</a></sup>. There are differences between the two,
but those differences don’t impact the results of this article. Type classes will prove a more convenient language
in which to discuss these ideas.</p>
<p>A type class (or trait) can be considered a predicate on types. A type class constraint (or trait bound) is an assertion
that the predicate must be true. For each constraint that is satisfied, there is corresponding ‘evidence’ that the
predicate is true.</p>
<p>When a type <code>T</code> has a <code>Sized</code> constraint, it is being asserted that the statement “<code>T</code> has a known size” is true. For
brevity, this will be written as <code>Sized T</code>. When this statement satisfied (for instance, when <code>T</code> is <code>int32</code>), the
evidence is produced is <em>the actual size</em> of <code>T</code> (when <code>Sized int32</code> is satisfied, the evidence
is the number <code>4</code> - the size of <code>int32</code>).</p>
<p>Generic types like <code>Two&lt;A&gt;</code> have a size that depends on their type parameter. In terms of constraints, it can
be said that <code>Sized A</code> <em>implies</em> <code>Sized Two&lt;A&gt;</code>. If <code>A</code> is <code>int32</code>, then its size is <code>4</code>, which implies that
<code>Two&lt;int32&gt;</code> has a size of <code>4 + 4 = 8</code>. Similarly, of <code>Pair</code> it can be said that <code>Sized A</code> implies [ <code>Sized B</code> implies
<code>Sized Pair&lt;A, B&gt;</code> ]. There is a choice between a curried an uncurried version; it could also be said that
[ <code>Sized A</code> <em>and</em> <code>Sized B</code> ] implies <code>Sized Pair&lt;A, B&gt;</code>, but the curried version will be used for convenience.</p>
<p>Note that type <em>constructors</em> don’t have a size. In other words, only types of kind <code>Type</code> have a size. A type constructor
such as <code>Two</code> (of kind <code>Type -&gt; Type</code>) has a size <em>function</em>. Given the sizes of the type constructor’s parameters,
a size function computes the size of the resulting datatype. <code>Two</code>’s size function is <code>\a -&gt; a + a</code>. <code>Pair</code>’s size
function <code>\a -&gt; b -&gt; a + b</code> (it could also be <code>\(a, b) -&gt; a + b</code> in an uncurried setting).</p>
<h3 id="problem-statement">Problem Statement</h3>
<p>With the background out of the way, the specific problem can be stated:</p>
<p>When a type of kind <code>Type</code> is relevant for a size calculation, it is given a <code>Sized</code> constraint, which will be
satisfied with a concrete size as evidence. What is the equivalent notion of constraint and evidence for
higher-kinded types that contribute to size calculations?</p>
<h2 id="solution">Solution</h2>
<p>An elegant solution to this problem can found by introducing quantified class constraints<sup><a href="#reference-quantified-constraints" id="reference-quantified-constraints:1">2</a></sup>. Quantified constraints
are an extension to type classes that add implication and quantification to the language of constraints, and corresponding
notions of evidence.</p>
<p>Here’s new syntax of quantified size constraints:</p>
<pre><code>constraint ::=
  Sized type               (size constraint)
  constraint =&gt; constraint (implication constraint)
  forall A. constraint     (quantification constraint)</code></pre>
<p>The evidence for a constraint <code>c1 =&gt; c2</code> is a function that takes evidence for <code>c1</code> and produces evidence for <code>c2</code>, and the
evidence for <code>forall A. c</code> is just the evidence for <code>c</code>. The evidence for quantification constraints is a bit more nuanced
in general, but this description is accurate when only considering size constraints.</p>
<p>Concretely, this means that the sizing rules for higher-kinded types can now be expressed using constraints, and size
calculations involving higher-kinded types can be performed using type class resolution. It is now the
case that <code>forall A. Sized A =&gt; Sized Two&lt;A&gt;</code>, and the evidence for this constraint is the function <code>\a -&gt; a + a</code>.
The relevant constraint for <code>Pair</code> is <code>forall A. forall B. Sized A =&gt; Sized B =&gt; Sized Pair&lt;A, B&gt;</code> with evidence function
<code>\a b -&gt; a + b</code>.</p>
<p>This extends to types of <em>any</em> kind. For all types, there is a mechanical way to derive an appropriate size constraint based
only on type’s kind;
<code>T</code> of kind <code>Type</code> leads to <code>Sized T</code>, <code>U</code> of kind <code>Type -&gt; Type</code> leads to <code>forall A. Sized A =&gt; Sized U&lt;A&gt;</code>, and so on. In
datatypes and functions, any size-relevant type variables can be assigned a size constraint in this way, and the compiler
will use this extra information when monomorphising definitions.</p>
<p><a href="https://github.com/LightAndLight/sized-hkts">sized-hkts</a> is a minimal compiler that implements these ideas. It supports
higher-kinded polymorphism, functions and algebraic datatypes, and compiles to C. Kinds and size constraints are inferred,
requiring no annotations from the user.</p>
<p>Here’s some example code that illustrates the
<a href="https://reasonablypolymorphic.com/blog/higher-kinded-data/">higher-kinded data</a> pattern
(<a href="https://github.com/LightAndLight/sized-hkts/blob/master/examples/ex2.src">source</a>, <a href="https://github.com/LightAndLight/sized-hkts/blob/master/examples/ex2.out">generated C code</a>):</p>
<pre><code>enum ListF f a { Nil(), Cons(f a, ptr (ListF f a)) }
enum Maybe a { Nothing(), Just(a) }
struct Identity a = Identity(a)

fn validate&lt;a&gt;(xs: ListF Maybe a) -&gt; Maybe (ListF Identity a) {
  match xs {
    Nil() =&gt; Just(Nil()),
    Cons(mx, rest) =&gt; match mx {
      Nothing() =&gt; Nothing(),
      Just(x) =&gt; match validate(*rest) {
        Nothing() =&gt; Nothing(),
        Just(nextRest) =&gt; Just(Cons(Identity(x), new[nextRest]))
      }
    }
  }
}

fn main() -&gt; int32 {
  let
    a = Nil();
    b = Cons(Nothing(), new[a]);
    c = Cons(Just(1), new[b])
  in
    match validate(c) {
      Nothing() =&gt; 11,
      Just(xs) =&gt; match xs {
        Nil() =&gt; 22,
        Cons(x, rest) =&gt; x.0
      }
    }
}</code></pre>
<p>This code defines a linked list whose elements are wrapped in a generic ‘container’ type. It defines two possible
container types: <code>Maybe</code>, which is a possibly-empty container, and <code>Identity</code>, the single-element container.
<code>validate</code> takes a list whose elements are wrapped in <code>Maybe</code> and tries to replace all the <code>Just</code>s with <code>Identity</code>s.
If any of the elements of the list are <code>Nothing</code>, then the whole function returns <code>Nothing</code>.</p>
<p>Points of interest in the generated code include:</p>
<ul>
<li>5 types are generated, corresponding to:
<code>ListF Maybe int32</code>, <code>ListF Identity int32</code>, <code>Maybe int32</code>, <code>Identity int32</code>, and <code>Maybe (ListF Identity int32)</code></li>
<li>Only 1 version of <code>validate</code> is generated, because it is only used at one instantiation of <code>a</code>.</li>
<li>The generated code makes no use of <code>sizeof</code>; the datatype sizes are known after typechecking and inlined during
code generation. The compiler knows that <code>ListF Maybe int32</code> is naively <code>14</code> bytes wide
(<code>1 + max(1, 1 + 4) + 8</code>), whereas <code>ListF Identity int32</code> is <code>13</code> bytes wide (<code>max(1, 1 + 4) + 8</code>).</li>
<li>The datatype sizes are not necessarily consistent with <code>sizeof</code>, because they ignore alignment for simplicity.
At this point, factoring alignment into the size calculations is straightforward.</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Quantified class constraints provide an elegant framework for statically-sized higher-kinded types. On its own, this
can raise the abstraction ceiling for high-performance languages, but it also serves as the groundwork for ‘zero-cost’
versions of functional programming abstractions such as Functor, Applicative, and Traversable.</p>
<p>This work shows it’s definitely possible for Rust to support higher-kinded types in a reasonable manner, but
there are some less theoretical reasons why that might not be a good idea in practice. Adding ‘quantified trait bounds’
would require new syntax, and represents an additional concept for users to learn. Adding a kind system to Rust
would also be a controversial change; choosing to keep types uncurried would disadvantage prospective users of the
system, and changing to curried types would require rethinking of syntax and educational materials to maintain Rust’s
high standard of user experience.</p>
<h2 id="references">References</h2>
<ol type="1">
<li><p><span id="reference-constructor-classes">Jones, M. P. (1995). A system of constructor classes:
overloading and implicit higher-order polymorphism. <em>Journal of functional programming</em>, 5(1),
1-35.</span> <a href="#reference-constructor-classes:1">↩︎<sup>1</sup></a> <a href="#reference-constructor-classes:2">↩︎<sup>2</sup></a></p></li>
<li><p><span id="reference-quantified-constraints">Bottu, G. J., Karachalias, G., Schrijvers, T.,
Oliveira, B. C. D. S., &amp; Wadler, P. (2017). Quantified class constraints. <em>ACM SIGPLAN Notices</em>,
52(10), 148-161.</span> <a href="#reference-quantified-constraints:1">↩︎</a></p></li>
</ol>]]>
    </content>
    
</entry><entry>
    <title>Lambdas are Codatatypes</title>
    <link href="https://blog.ielliott.io/lambdas-are-codatatypes" />
    
    <id>https://blog.ielliott.io/lambdas-are-codatatypes</id>
    
    <published>2019-07-01T00:00:00Z</published>
    <updated>2023-05-01T10:23+00:00</updated>
    <summary type="html"><![CDATA[<p>I was first clued into this a while ago by
<a href="https://existentialtype.wordpress.com/2011/04/24/the-real-point-of-laziness/">a comment on Bob Harper’s blog</a> that “exponentials are coinductive”, but it only really clicked for me today. Let’s get into it.</p>]]></summary>
    
    <content type="html" xml:base="https://blog.ielliott.io/lambdas-are-codatatypes">
      <![CDATA[<p>I was first clued into this a while ago by
<a href="https://existentialtype.wordpress.com/2011/04/24/the-real-point-of-laziness/">a comment on Bob Harper’s blog</a> that “exponentials are coinductive”, but it only really clicked for me today. Let’s get into it.</p>
<h2 id="datatypes">Datatypes</h2>
<h3 id="defining-them">Defining them</h3>
<p>When you define a datatype, you list the ways to construct values of that type. For example,
this definition:</p>
<pre><code>data Bool : Type where { 
  True;
  False
}</code></pre>
<p>says there are two ways to construct a <code>Bool</code>: <code>True</code> and <code>False</code>.</p>
<p>Similarly, this definition:</p>
<pre><code>data These (a : Type) (b : Type) : Type where { 
  This[a];
  That[b];
  These[a, b]
} </code></pre>
<p>gives three ways to construct a <code>These a b</code> (for any values of <code>a</code> and <code>b</code>). <code>This[0]</code> has type
<code>These Int x</code>, for any <code>x</code>. <code>That[True]</code> has type <code>These x Bool</code> for any <code>x</code>. <code>These[0, True]</code> has
type <code>These Int Bool</code>.</p>
<p>I want to note that constructors aren’t functions; they have a fixed number of arguments and must
be fully applied.</p>
<p>Datatypes can also be defined recursively:</p>
<pre><code>data List (a : Type) : Type where {
  Nil;
  Cons[a, List a]
}</code></pre>
<h3 id="using-them">Using them</h3>
<p>The way you construct a value of a datatype is unique to that datatype; there are a finite number of
constructors, and each represents a different way to build a value of that type. In contrast, there is
a universal way to <em>destruct</em> values: pattern matching.</p>
<p>If some expression <code>x</code> has type <code>Bool</code> then we can destruct <code>x</code> using pattern matching:</p>
<pre><code>case x of {
  True -&gt; ...;
  False -&gt; ...
}</code></pre>
<p>A pattern match acknowledges all the ways that a value could have been constructed, and provides
a branch for each possible case. When constructors carry around other values
(like those of <code>These</code> or <code>List</code>), pattern matching is used to write programs that extract and
process the inner values:</p>
<pre><code>case y of {
  This[a] -&gt; f a;
  That[b] -&gt; g b;
  These[c, d] -&gt; h c d
}</code></pre>
<p>When a program is running, the value that is being matched will eventually reduce to a constructor form:</p>
<pre><code>case (These 0 True) of {
  This[a] -&gt; f a;
  That[b] -&gt; g b;
  These[c, d] -&gt; h c d
}</code></pre>
<p>at which point, the appropriate branch is selected and the contents of the constructor are substituted
to the right of the <code>-&gt;</code>. The above code will pick the <code>These</code> branch, substituting <code>0</code> for <code>c</code> and <code>True</code>
for <code>d</code>, so that the final result is <code>h 0 True</code>.</p>
<p>Pattern matching is enough to process non-recursive datatypes, but recursive datatypes require recursive
function definitions:</p>
<pre><code>sum : List Int -&gt; Int
sum n =
  case n of {
    Nil -&gt; 0;
    Cons[x, xs] -&gt; x + sum xs
  }</code></pre>
<p>Hopefully this is all familiar to you. I’ve covered all this so that it contrasts with <em>codatatypes</em>.</p>
<h2 id="codatatypes">Codatatypes</h2>
<p>Codatatypes are the dual to datatypes. Formally, this means a lot of things that I don’t yet understand. What
follows is how this duality arises in practise.</p>
<p>To begin, I’d like to share some hand-wavy intuition for the concepts I’m
discussing.</p>
<p>Datatypes <em>are</em>. They’re finite, fully-evaluated structures. They’re inert; they just exist and won’t ever
“do anything”. Haskell doesn’t have true ‘datatypes’ in this sense because its constructors don’t force their
arguments to be evaluated, which means you can hide computations inside them. Haskell lets you partially
apply constructors, which further diverges from what I’ve laid out here.</p>
<p>Codatatypes <em>do</em>. They have ‘potential energy’; they have the capacity to do more work when prodded. Haskell’s
‘datatypes’ are more codata-like in this respect because they can contain suspended computations.</p>
<h3 id="defining-them-1">Defining them</h3>
<p>Since datatypes are defined by their constructors, codatatypes will be defined by their <em>destructors</em>.</p>
<p>This definition:</p>
<pre><code>codata Pair (a : Type) (b : Type) : Type where {
  fst : a;
  snd : b
}</code></pre>
<p>says that there are two ways to <em>destruct</em> a <code>Pair a b</code> (for any <code>a</code> and <code>b</code>). If some expression <code>x</code> has
type <code>Pair a b</code>, then <code>x.fst</code> has type and <code>a</code>, and <code>x.snd</code> has type a <code>b</code>.</p>
<p><code>Pair</code> really is pair, it has just been defined by the ways you can pull things out of it- you can either
extract the first thing, or you can extract the second.</p>
<p>I also want to note that destructors aren’t functions, either. You can’t partially apply a destructor, and
they’re not first-class.</p>
<p>Codatatypes can also be recursive:</p>
<pre><code>codata Stream (a : Type) : Type where {
  head : a;
  tail : Stream a
}</code></pre>
<p>A stream is like an infinite list; every stream value contains a head and a tail, and no matter how many
times you extract the tail, there will always be another stream waiting for you.</p>
<h3 id="using-them-1">Using them</h3>
<p>There is a universal way to destruct datatypes, and there is a universal way to <em>construct</em> <em>codatatypes</em>.
For lack of a better term, you can call it ‘copattern matching’. Here’s how you would construct a
<code>Pair Int Bool</code>:</p>
<pre><code>cocase Pair Int Bool of {
  fst -&gt; 0;
  snd -&gt; True
}</code></pre>
<p>A copattern match acknowledges every way it could be destructed, and provides a branch for each case.
Remember, copattern matching <em>constructs</em> values. The above code is a value that produces <code>0</code> when
destructed using <code>fst</code>, and <code>True</code> when destructed using <code>snd</code>. It is defining a pair of <code>0</code> with <code>True</code>.</p>
<p>When a program is running, a value that is being destructed will eventually reduce to a copattern match form.
So <code>x.fst</code> might reduce to <code>(cocase Pair Int Bool of { fst -&gt; 0; snd -&gt; True }).fst</code>. At this point,
the appropriate branch in the copattern match will be chosen, and the right hand side of the <code>-&gt;</code> will be
selected. In this case, <code>(cocase Pair Int Bool of { fst -&gt; 0; snd -&gt; True }).fst</code> reduces to <code>0</code>.</p>
<p>Recursive codatatypes like <code>Stream</code> need to be constructed by recursive definitions:</p>
<pre><code>countFrom : Int -&gt; Stream Int
countFrom n =
  cocase Stream Int of {
    head -&gt; n;
    tail -&gt; countFrom (n+1)
  }</code></pre>
<p><code>countFrom 0</code> produces an infinite stream of integers starting at <code>0</code>. However, it doesn’t spin forever,
trying to construct the entire stream in one go. This is because a lone copattern match won’t reduce; reduction
only continues after a destructor has been applied and the correct branch has been selected. Because of
this, codatatypes can represent infinite values that are only generated on demand.</p>
<p>Datatype constructors can carry around values, and so can codatatype <em>destructors</em>.
Here’s what that looks like:</p>
<pre><code>codata Lambda (a : Type) (b : Type) : Type where {
  apply[a] : b
}</code></pre>
<p>There is one way to destruct a value of type <code>Lambda a b</code> called <code>apply</code>, and this destructor takes a
parameter. If <code>f</code> has type <code>Lambda a b</code>, and <code>x</code> has type <code>a</code>, then <code>f.apply[x]</code> has type <code>b</code>.</p>
<p>To create a value of type <code>Lambda a b</code>, you would use a copattern match:</p>
<pre><code>cocase Lambda a b of {
  apply[x] -&gt; ...
}</code></pre>
<p>The destructor’s parameter is abstract and is to be filled by the value that the destructor will be carrying.
For example, <code>(cocase Lambda Int Int of { apply[x] -&gt; x + 1 }).apply[2]</code> selects the appropriate branch
(there’s only one), and substitutes <code>2</code> for <code>x</code> to the right of the <code>-&gt;</code>. It steps to <code>2 + 1</code>.</p>
<p>So lambdas can be defined as codatatypes. Their destructor corresponds to function application, and
copattern matching corresponds to abstraction. This is awesome!</p>]]>
    </content>
    
</entry><entry>
    <title>Configuring Agda's standard library on NixOS</title>
    <link href="https://blog.ielliott.io/agda-nixos" />
    
    <id>https://blog.ielliott.io/agda-nixos</id>
    
    <published>2019-05-17T23:49:00Z</published>
    <updated>2023-05-01T10:23+00:00</updated>
    <summary type="html"><![CDATA[<p>I’ve been using Agda on NixOS for a while (mostly via <code>agda-mode</code> in Emacs), but I remember it was a bit
difficult to get going the very first time. Hopefully this becomes a searchable reference
to getting it all set up quickly.</p>]]></summary>
    
    <content type="html" xml:base="https://blog.ielliott.io/agda-nixos">
      <![CDATA[<p>I’ve been using Agda on NixOS for a while (mostly via <code>agda-mode</code> in Emacs), but I remember it was a bit
difficult to get going the very first time. Hopefully this becomes a searchable reference
to getting it all set up quickly.</p>
<hr />
<p>Prerequisites:</p>
<ul>
<li>Working NixOS installation</li>
<li>Agda &gt;=2.5.1</li>
</ul>
<ol type="1">
<li><p>Install <code>AgdaStdlib</code> globally</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co"># /etc/nixos/configuration.nix</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>...</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>environment.systemPackages = <span class="kw">with</span> pkgs<span class="op">;</span> <span class="op">[</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>  ...</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>  AgdaStdLib</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="op">]</span>;</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>...</span></code></pre></div></li>
<li><p>Link <code>/share/agda</code></p>
<div class="sourceCode" id="cb2"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co"># /etc/nixos/configuration.nix</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>...</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>environment.pathsToLink = <span class="op">[</span> <span class="st">&quot;/share/agda&quot;</span> <span class="op">]</span>;</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>...</span></code></pre></div></li>
<li><p>Rebuild: <code>sudo nixos-rebuild switch</code></p></li>
<li><p>Navigate to or create <code>~/.agda</code></p></li>
<li><p>Create 3 files in <code>~/.agda</code>: <code>defaults</code>, <code>libraries</code>, <code>standard-library.agda-lib</code></p>
<pre class="shell_session"><code>[isaac:~/.agda]$ touch defaults
[isaac:~/.agda]$ touch libraries
[isaac:~/.agda]$ touch standard-library.agda-lib</code></pre></li>
<li><p>Edit <code>standard-library.agda-lib</code></p>
<pre class="shell_session"><code>[isaac:~/.agda]$ cat &lt;&lt; EOF &gt;&gt; standard-library.agda-library
&gt; name: standard-library
&gt; include: /run/current-system/sw/share/agda/
&gt; EOF</code></pre>
<p>This says that there is a library located at the relevant NixOS path.</p></li>
<li><p>Edit <code>libraries</code></p>
<pre class="shell_session"><code>[isaac:~/.agda]$ echo &quot;/home/isaac/.agda/standard-library.agda-lib&quot; &gt;&gt; libraries</code></pre>
<p>This registers the <code>.agda-lib</code> file with Agda.</p></li>
<li><p>Edit <code>defaults</code></p>
<pre class="shell_session"><code>[isaac:~/.agda]$ echo &quot;standard-library&quot; &gt;&gt; defaults</code></pre>
<p>This tells Agda to include the <code>standard-library</code> library by default.</p></li>
</ol>
<p>To check your installation, try compiling a simple Agda file:</p>
<pre class="shell_session"><code>[isaac:~]$ cat &lt;&lt; EOF &gt;&gt; Test.agda
&gt; module Test where
&gt; open import Data.Nat
&gt; EOF
[isaac:~]$ agda Test.agda
Checking Test (/home/isaac/Test.agda).
</code></pre>
<p>Let me know whether or not this works for you :)</p>]]>
    </content>
    
</entry><entry>
    <title>Conditional Probabilities and Obnoxious White Guys</title>
    <link href="https://blog.ielliott.io/conditional-probabilities-obnoxious-white-guys" />
    
    <id>https://blog.ielliott.io/conditional-probabilities-obnoxious-white-guys</id>
    
    <published>2019-05-05T00:00:00Z</published>
    <updated>2023-05-01T10:23+00:00</updated>
    <summary type="html"><![CDATA[<p>In <a href="https://twitter.com/DrEugeniaCheng/status/1124795257814691841">this Twitter thread</a>,
Eugenia Cheng talks about how she presented at a conference for women in STEM, and was
confronted by a white guy who felt ‘called out’ by some of her anecdotes. Apparently, she
described interactions with obnoxious individuals in a professional setting, and noted that
they were all white guys. Ironically, the guy raised the issue in such a way that he was added
to the list of anecdotes.</p>]]></summary>
    
    <content type="html" xml:base="https://blog.ielliott.io/conditional-probabilities-obnoxious-white-guys">
      <![CDATA[<p>In <a href="https://twitter.com/DrEugeniaCheng/status/1124795257814691841">this Twitter thread</a>,
Eugenia Cheng talks about how she presented at a conference for women in STEM, and was
confronted by a white guy who felt ‘called out’ by some of her anecdotes. Apparently, she
described interactions with obnoxious individuals in a professional setting, and noted that
they were all white guys. Ironically, the guy raised the issue in such a way that he was added
to the list of anecdotes.</p>
<p>Later, Dr. Cheng <a href="https://twitter.com/DrEugeniaCheng/status/1124805201452515328">clearly states her position</a>.</p>
<blockquote>
<p>…people being obnoxious to me professionally are almost all white guys…</p>
</blockquote>
<p>Many people take her word for it, but some (particularly white guys) are skeptical. I’m going to
quickly examine some degrees of belief in her claim through the lens of probability theory.</p>
<hr />
<p>To begin, I want to explain why I have bothered to think about this. I believe Eugenia’s statement;
I have no reason to think that she’s mistaken or lying. But in spite of this, for some reason, I
empathised with the aforementioned white guy. Why? My unease wasn’t caused by any conscious
reasoning process; it just seemed to arise of its own accord.</p>
<p>I’ve been learning that <a href="https://medium.com/@ThingMaker/focusing-for-skeptics-6b949ef33a4f">“focusing”</a>
can be a helpful way to unpack these confusing feelings. I didn’t go all-out focusing on this,
but throughout my inquiry I made sure to be conscious of how my reasoning interacted with the feeling.</p>
<p>To paint a better picture of the feeling, it was something like:</p>
<ul>
<li>“Tenseness”</li>
<li>“Singled out”</li>
<li>“I feel like I’m about to fight something”</li>
</ul>
<p>To re-iterate: I don’t think these feelings were rational, which is why I decided to keep digging. Let’s
get into it. I’m going to assume basic familiarity with probability theory, and an understanding that
<a href="https://www.lesswrong.com/posts/f6ZLxEWaankRZ2Crv/probability-is-in-the-mind">probability is in the mind</a>.</p>
<p>I think Eugenia’s claim is this:
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mtext mathvariant="normal">person was white guy</mtext><mspace width="0.278em"></mspace><mo stretchy="false" form="prefix">|</mo><mspace width="0.278em"></mspace><mtext mathvariant="normal">interacted with obnoxious person</mtext><mo stretchy="true" form="postfix">)</mo></mrow><mo>&gt;</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">P( \text{person was white guy} \; | \; \text{interacted with obnoxious person} ) &gt; 0.5</annotation></semantics></math>. In other
words: of all the obnoxious researchers she’s interacted with, most are white guys. Let’s look at the
conditional probability in terms of Bayes’ Theorem:</p>
<p><math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>W</mi><mi>G</mi><mo stretchy="false" form="prefix">|</mo><mi>O</mi><mo stretchy="true" form="postfix">)</mo></mrow><mo>=</mo><mfrac><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>O</mi><mo stretchy="false" form="prefix">|</mo><mi>W</mi><mi>G</mi><mo stretchy="true" form="postfix">)</mo></mrow><mo>⋅</mo><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>W</mi><mi>G</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>O</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow></mfrac></mrow><annotation encoding="application/x-tex"> P(WG | O) = \frac{P(O | WG) \cdot P(WG)}{P(O)} </annotation></semantics></math></p>
<p>To start with, I’ll plug in my estimates to show why I don’t disagree with her.</p>
<p>I think mathematics is pretty
male-dominated, so I’m going to say <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>W</mi><mi>G</mi><mo stretchy="true" form="postfix">)</mo></mrow><mo>=</mo><mn>0.7</mn></mrow><annotation encoding="application/x-tex">P(WG) = 0.7</annotation></semantics></math>. Seven in ten researchers she meets are white dudes.</p>
<p>Let’s then say that <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>O</mi><mo stretchy="true" form="postfix">)</mo></mrow><mo>=</mo><mn>0.1</mn></mrow><annotation encoding="application/x-tex">P(O) = 0.1</annotation></semantics></math> — one in ten researchers she interacts with are jerks (am I optimistic or
pessimistic about the academic community?).</p>
<p>Lastly there’s <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>O</mi><mo stretchy="false" form="prefix">|</mo><mi>W</mi><mi>G</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">P(O | WG)</annotation></semantics></math>: of all the white male researchers she meets, how many act
obnoxiously? I’m going to be charitable here and say (for demonstration purposes) that the white guys are
no more jerkish on average, so one in ten white male researchers she interacts with are jerks to her.
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>O</mi><mo stretchy="false" form="prefix">|</mo><mi>W</mi><mi>G</mi><mo stretchy="true" form="postfix">)</mo></mrow><mo>=</mo><mn>0.1</mn></mrow><annotation encoding="application/x-tex">P(O | WG) = 0.1</annotation></semantics></math>.</p>
<p>Now, compute!</p>
<p><math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable><mtr><mtd columnalign="right"><mspace width="0.222em"></mspace></mtd><mtd columnalign="left"><mfrac><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>O</mi><mo stretchy="false" form="prefix">|</mo><mi>W</mi><mi>G</mi><mo stretchy="true" form="postfix">)</mo></mrow><mo>⋅</mo><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>W</mi><mi>G</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>O</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow></mfrac></mtd></mtr><mtr><mtd columnalign="right"></mtd></mtr><mtr><mtd columnalign="right"><mo>=</mo></mtd><mtd columnalign="left"><mspace width="0.278em"></mspace><mfrac><mrow><mn>0.1</mn><mo>⋅</mo><mn>0.7</mn></mrow><mn>0.1</mn></mfrac></mtd></mtr><mtr><mtd columnalign="right"></mtd></mtr><mtr><mtd columnalign="right"><mo>=</mo></mtd><mtd columnalign="left"><mspace width="0.278em"></mspace><mn>0.7</mn></mtd></mtr></mtable><annotation encoding="application/x-tex">
\begin{aligned}
~ &amp; \frac{P(O | WG) \cdot P(WG)}{P(O)} \\\\
= &amp; \; \frac{0.1 \cdot 0.7}{0.1} \\\\
= &amp; \; 0.7
\end{aligned}
</annotation></semantics></math></p>
<p>My estimate is consistent with her statement - of all the obnoxious researchers she meets, seven in ten
would be white guys, even when assuming zero racial/gender biases.</p>
<p>Suppose you disagree with me. That is, your estimates are such that <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>W</mi><mi>G</mi><mo stretchy="false" form="prefix">|</mo><mi>O</mi><mo stretchy="true" form="postfix">)</mo></mrow><mo>≤</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">P(WG | O) \le 0.5</annotation></semantics></math>. There are two ways
to disagree here:</p>
<ol type="1">
<li><p>A lower ratio <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mfrac><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>O</mi><mo stretchy="false" form="prefix">|</mo><mi>W</mi><mi>G</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>O</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow></mfrac><annotation encoding="application/x-tex">\frac{P(O | WG)}{P(O)}</annotation></semantics></math>. You might take
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>O</mi><mo stretchy="false" form="prefix">|</mo><mi>W</mi><mi>G</mi><mo stretchy="true" form="postfix">)</mo></mrow><mo>=</mo><mn>0.07</mn></mrow><annotation encoding="application/x-tex">P(O | WG) = 0.07</annotation></semantics></math>, which means <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>W</mi><mi>G</mi><mo stretchy="false" form="prefix">|</mo><mi>O</mi><mo stretchy="true" form="postfix">)</mo></mrow><mo>=</mo><mn>0.49</mn></mrow><annotation encoding="application/x-tex">P(WG | O) = 0.49</annotation></semantics></math>. You might instead take
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>O</mi><mo stretchy="true" form="postfix">)</mo></mrow><mo>=</mo><mn>0.14</mn></mrow><annotation encoding="application/x-tex">P(O) = 0.14</annotation></semantics></math> for a similar result. Either way, you’re claiming that the fragment of
white male researchers Dr. Cheng meets are nicer on average than the general population of
researchers she has met.</p></li>
<li><p>A lower <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>W</mi><mi>G</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">P(WG)</annotation></semantics></math>, indicating that you think Dr. Cheng interacts with relatively fewer white
male researchers.</p></li>
</ol>
<p>Running through these calculations didn’t give me any closure. I agree on paper, and feel that my estimates are
appropriate. In fact, I would take <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mfrac><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>O</mi><mo stretchy="false" form="prefix">|</mo><mi>W</mi><mi>G</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>O</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow></mfrac><annotation encoding="application/x-tex">\frac{P(O | WG)}{P(O)}</annotation></semantics></math> to be slightly greater than one, to account
for biases like sexism and racism. But that only means I agree more.</p>
<p>The idea that ‘clicked’ with me, that immediately resolved my inner turmoil, was this: somehow I’m implicitly
turning
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>W</mi><mi>G</mi><mo stretchy="false" form="prefix">|</mo><mi>O</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">P(WG | O)</annotation></semantics></math> into <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>O</mi><mo stretchy="false" form="prefix">|</mo><mi>W</mi><mi>G</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">P(O | WG)</annotation></semantics></math>. <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>O</mi><mo stretchy="false" form="prefix">|</mo><mi>W</mi><mi>G</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">P(O | WG)</annotation></semantics></math> is the term from which stereotypes are born. If most
of the white guys you meet are jerks, then your <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>O</mi><mo stretchy="false" form="prefix">|</mo><mi>W</mi><mi>G</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">P(O | WG)</annotation></semantics></math> is high. If you don’t quotient that by the
proportion of people who are rude to you in general, then you have a gratuitous stereotype. If you do then
you’re completely justified in thinking that ‘white guy’ and ‘obnoxious’ are correlated. So I think that somehow
my wires were crossed and I was subconsciously interpreting the conversation as purely a statement about
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>O</mi><mo stretchy="false" form="prefix">|</mo><mi>W</mi><mi>G</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">P(O | WG)</annotation></semantics></math>.</p>
<p>I think this kind of error falls in the category of
<a href="https://en.wikipedia.org/wiki/Attribute_substitution">attribute substitution</a>, and I think it’s pretty common.
For example in <a href="https://www.youtube.com/watch?v=BrK7X_XlGB8">Julia Galef’s video about Bayes’ Theorem</a>, she says that before
students learn Bayes’ Theorem, they often give <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>B</mi><mo stretchy="false" form="prefix">|</mo><mi>A</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">P(B | A)</annotation></semantics></math> when asked for <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>A</mi><mo stretchy="false" form="prefix">|</mo><mi>B</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">P(A | B)</annotation></semantics></math>. I
don’t know how exactly this sort of thing happens — maybe I’ll explore that some other time.</p>
<p>Anyway, I’m glad that my feelings and beliefs are now in sync on this issue.</p>]]>
    </content>
    
</entry><entry>
    <title>Learning a Craft</title>
    <link href="https://blog.ielliott.io/learning-a-craft" />
    
    <id>https://blog.ielliott.io/learning-a-craft</id>
    
    <published>2019-02-11T00:00:00Z</published>
    <updated>2023-05-01T10:23+00:00</updated>
    <summary type="html"><![CDATA[<p>I remember when I first learned about computer programming, around 2008 or 2009.
I wanted to make games, and asked a search engine. Apparently computer graphics
was way too hard, so I decided I wanted to create browser-based static HTML
games and text-based roguelikes. Having learned that PHP and MySQL exist, I sat
down and brainstormed a setting, classes and roles for characters, and all the
other things that come with fantasy RPGs.</p>]]></summary>
    
    <content type="html" xml:base="https://blog.ielliott.io/learning-a-craft">
      <![CDATA[<p>I remember when I first learned about computer programming, around 2008 or 2009.
I wanted to make games, and asked a search engine. Apparently computer graphics
was way too hard, so I decided I wanted to create browser-based static HTML
games and text-based roguelikes. Having learned that PHP and MySQL exist, I sat
down and brainstormed a setting, classes and roles for characters, and all the
other things that come with fantasy RPGs.</p>
<p>Soon after, I realised I wasn’t capable of building any of it.</p>
<p>At the time, even the simplest programs were incredibly confusing, and the
complexity of a browser game was far beyond me. I’m lucky that I didn’t give up
on programming after realising I couldn’t build any of my cool ideas. For me,
just being able to make computers do things was enthralling, and my learning
became self-propelled — games be damned.</p>
<p>Contrast this with how I’ve recently approached another activity that I’m
interested in, but very bad at: creative writing. For a while now I’ve wanted to
learn how to tell stories, and this has been my process so far:</p>
<blockquote>
<p>“I want to write stuff.”</p>
<p>“Not just any old stuff, but <em>cool</em> stuff; interesting stuff.”</p>
<p>“But I don’t have any cool ideas!”</p>
<p>“Guess I won’t write about anything then.”</p>
</blockquote>
<p>In other words: I’ve learned <em>nothing</em>, because I haven’t done anything. I’ve
been paralysed by this desire to only make ‘interesting’ things. It’s easy
to imagine that other people have been stuck in similar situations with
programming: someone wants to learn to code, but doesn’t know what to build, or
only wants to work on seriously cool and ground-breaking projects. And I’m sure
it’s not only programming; it seems there’s a common set of problems facing
people who take up a craft. To address this, I’m going to think of advice that I
would give to beginner programmers and generalise it.</p>
<h2 id="drop-your-standards-and-shelve-your-ideas">Drop your standards and shelve your ideas</h2>
<p>At the start of the learning process, you have barely any ability. This means
that by most standards, you will produce a lot of terrible, unskilled work. But
that’s okay, because at this stage each piece of work is a step toward
improvement. Each thing you make exists so that you can figure out how to make
the <em>next</em> one better. Your standards, or
<a href="https://www.youtube.com/watch?v=X2wLP0izeJE">taste</a>, can still point you in
directions for improvement, but your mistakes and shortcomings are not <em>bad
things</em>.</p>
<p>If you have any grand designs, put them on hold. Chances are you don’t have the
ability to see them through right now. Sometimes lofty ideas can help you figure
out which areas to study – if you dream of making a first person shooter then
you should definitely learn about 3D graphics. In general, though, I think it
will help to put the big ideas aside until you’re more skilled.</p>
<h2 id="make-everything">Make EVERYTHING</h2>
<p>When I started coding, I made calculator and to-do list apps, tiny
database-backed webapps and 2D space shooters and brick breakers. None of this
was remotely novel; it was a challenge just to repeat what others had built
before me. Even though I wasn’t building anything original, I was still creating
something that <em>I</em> had never made before, which was a huge learning experience.
Even simple programs, like a calculator, require important fundamental skills
that I didn’t have. I encountered problems that had been solved countless times
by others, but that didn’t diminish the value of solving them for myself.</p>
<p>Getting into this mindset seems especially difficult in ‘creative’ endeavours
like writing, game programming, or visual art. It feels like in these areas,
there’s a big emphasis on being unique, imaginative, and innovative. While this
is a fine standard for experts, it’s the wrong way for beginners to approach a
craft. Making shiny new stuff comes later; right now you need to re-make old
stuff.</p>
<p>Replicating past work doesn’t mean to copy things out line for line. Copy the
idea, and figure out how to fill in the details yourself. When I sat down and
said “I’m going to write a brick breaking game”, I didn’t go and cut sections of
code out of other similar games. I took the un-original concept, broke it into
smaller components, and figured out how to make each of those bits. How do I
display a ball on the screen? How do I make it move? How do I make it bounce?
Each sub-problem required original thinking on my part, and it’s this original
thinking that drove my improvement.</p>
<h2 id="find-joy-in-the-process">Find joy in the process</h2>
<p>Motivation is really important for making consistent progress in a skill, but
not all motivations are equally effective. I think the least sustainable
motivational source (but most common for beginners) is ‘wanting to make
something good’. If this is your main motivation, then you’ll be in a constant
state of discouragement — every piece of work a reminder of your lack of
ability. These little negatives slowly add up until you resent the activity.</p>
<p>A better motivational source is ‘to improve at something’. With this
perspective, you feel accomplishment whenever you notice that your skills have
increased, which happens often for beginners who practise regularly. But
improvement-based motivation isn’t enough on its own; there are periods where
you won’t notice improvement, but it’s important to practise anyway.</p>
<p>The most important and fundamental source of motivation comes from enjoying the
activity itself. If you enjoy the craft regardless of standards of quality or
ability, then it doesn’t matter how ‘bad’ your work is in the beginning, because
producing it is a joy in itself. I’ve spent days and sometimes weeks stuck
trying to make my code work the way I intended, but that’s all okay because it’s
part of the process. At the end of the day I just like making computers do
things.</p>
<hr />
<p>I mainly wrote this for myself, to get a bit of a handle on why I find writing
so difficult and how I can make it easier. I think it has helped. The next thing
I write (not on here) will likely be the literary equivalent of a command-line
calculator program — and that’s okay.</p>
<p><em>All this ‘advice’ may seem obvious to some, or lacking in original insight, and
I’m</em> sure <em>other people have written about these things to greater effect than me.
But that’s beside the point, isn’t it?</em></p>]]>
    </content>
    
</entry><entry>
    <title>Writing</title>
    <link href="https://blog.ielliott.io/writing" />
    
    <id>https://blog.ielliott.io/writing</id>
    
    <published>2018-12-29T00:00:00Z</published>
    <updated>2023-05-01T10:23+00:00</updated>
    <summary type="html"><![CDATA[<p>I think writing can help us think better.</p>]]></summary>
    
    <content type="html" xml:base="https://blog.ielliott.io/writing">
      <![CDATA[<p>I think writing can help us think better.</p>
<p>Not the act of writing itself, but a particular writing process where you take
an idea, think deeply about exactly how you want to express it, and then write
it down. I think the process itself provides part of the value, as a form of
“brain exercise”, but also the end product, as a foundation upon which we can
build more robust ideas.</p>
<p>This post is a funny self-referential exercise where I explore what I’m writing
about as I write it.</p>
<hr />
<p>When I have a thought, I feel pretty confident about it. It seems real and solid
and it feels like I understand it. But most of the time this is an illusion.
If I try to go deeper and ask myself questions like “Why do you think that?” or “Can you
elaborate?” I often find it hard to come up with an answer. When this happens I
say my idea lacks ‘substance’ or ‘structure’. There are no justifications or
consequences bundled along with the thought; it’s kind of empty. Substance is important for
ideas to be meaningful - at best, an insubstantial idea is a platitude, and at
worse, outright nonsense. So if I have an idea, I’d like to give it some meaning
(or figure out that it is actually as empty as it seems).</p>
<p>If I want to uncover the structure of an idea, I need to think more about it. I need to
ask questions and explore perspectives. I’ll have a stack of relevant sub-ideas
that all need to be related to the larger idea. If I tried to do all this in my
head then I wouldn’t get very far. My working memory is really tiny compared to
the ideas I want to tackle. So my first use for writing is as a tool of thought:
I can store all my relevant thoughts onto a page and devote my full attention to
the particular problem at hand. Sound reasoning is an important component of
‘thinking better’, and writing enables me to devote more attention to that
process. Not only can I reason better, but I also have the freedom to reason
<em>more</em>, because I can explore more sub-ideas without getting lost. Writing
allows me to increase the intensity and volume of reasoning, which seems like it
should lead to greater improvement in the area.</p>
<p>In addition to being a personal tool, writing also is used to transfer
information between two different minds, and I think being conscious of this is
an important part of the process. To me, writing seems like a kind of
telepathy. It’s a way to transmit thoughts between minds via a physical medium.
But high fidelity transmission isn’t guaranteed just because you wrote
<em>something</em> down. We need to put words together in a way that makes it more
likely for the telepathy to be successful. I think that to succeed at this
sort of language game requires a clear understanding of the subject matter. When
you understand what you’re talking about, you can play with the descriptions you use
and compare their accuracy, then use the best description in your final work.
But if you don’t understand what you’re
talking about then there’s not much to measure your words against in the first
place. I think that focusing on communication forces us to search for
the ‘essence’ of an idea, which further engages our critical thinking abilities.</p>
<p>My hope is that putting all this effort into exploring and refining an idea
creates new intellectual opportunities in the future. Kind of like taking blobs
of clay and forging them into bricks: if you want to build a tower,
you want to start with the foundation and work up, brick by brick. You won’t get
very high by stacking clay. Similarly, this
writing process might be refining ideas in a way that is necessary to make
further intellectual progress, and that without it, there would be a much lower
ceiling on what we can achieve.</p>
<p>Having written all this down, I think a summary of this process is: the <a href="https://en.wikipedia.org/wiki/Practice_(learning_method)#Deliberate_practice">deliberate
practise</a>
of organising thought, critical thinking, and effective communication. Writing
serves dual purposes: as a tool it enables us to better explore ideas, and treating it
as an end in itself requires us to better understand those ideas.</p>]]>
    </content>
    
</entry><entry>
    <title>On Programming Language Design</title>
    <link href="https://blog.ielliott.io/on-programming-language-design" />
    
    <id>https://blog.ielliott.io/on-programming-language-design</id>
    
    <published>2018-11-21T00:00:00Z</published>
    <updated>2023-05-01T10:23+00:00</updated>
    <summary type="html"><![CDATA[<p>In his <a href="https://www.youtube.com/watch?v=IOiZatlZtGU">propositions as types
talk</a>, Philip Wadler contrasts
programming languages that have been ‘invented’ with those that have been
‘discovered’. <a href="https://www.youtube.com/watch?v=IOiZatlZtGU&amp;t=28m12s">“And you can tell!” he exclaims, receiving giggles from the
audience</a>. Regardless of
how you feel about <a href="https://en.wikipedia.org/wiki/Philosophy_of_mathematics#Platonism">mathematical
platonism</a>,
I think Phil is pointing at a meaningful difference in the way certain ideas
arise.</p>]]></summary>
    
    <content type="html" xml:base="https://blog.ielliott.io/on-programming-language-design">
      <![CDATA[<p>In his <a href="https://www.youtube.com/watch?v=IOiZatlZtGU">propositions as types
talk</a>, Philip Wadler contrasts
programming languages that have been ‘invented’ with those that have been
‘discovered’. <a href="https://www.youtube.com/watch?v=IOiZatlZtGU&amp;t=28m12s">“And you can tell!” he exclaims, receiving giggles from the
audience</a>. Regardless of
how you feel about <a href="https://en.wikipedia.org/wiki/Philosophy_of_mathematics#Platonism">mathematical
platonism</a>,
I think Phil is pointing at a meaningful difference in the way certain ideas
arise.</p>
<hr />
<p><a href="https://en.wikipedia.org/wiki/Vacuum_cleaner">Vacuum cleaner</a> is just not ‘the
same kind of thing’ as <a href="https://en.wikipedia.org/wiki/Monoid">monoid</a>.</p>
<p>On one hand, we have something that was built to accomplish a task. Vacuum cleaners
suck stuff up. Some of them have wheels and some go on your back. Some have
carpet cleaning attachments and some are adapted for tile floors. In the end, we
have an object that was made to clean, made of bits that we can point to and say
“this bit helps it suck better” or “this bit makes it easier to move” or “this
bit makes it look pretty”.</p>
<p>On the other hand, we have something that describes how things can relate to
each other. When you say “the natural numbers with addition and 0 form a
monoid”, you impose some structure onto the natural numbers. We can prove
whether or not the naturals do exhibit this structure, and then use that fact to
inform how we should think about them. We can’t ‘point at bits of monoid’ and
say how much they contribute to some purpose.</p>
<p>It seems like the popular perception of programming languages falls more in the
‘vacuum cleaner’ camp: that a programming language is <em>just</em> something for
translating a description of computation into something machine-readable. If you
want to describe computations involving numbers and strings, then you add ‘do
number stuff’ and ‘do string stuff’ features to the language. If you find that
‘X-Y-Z’ is a common coding pattern, you might introduce ‘W’ syntax, which does
‘X-Y-Z’ but is easier to type.</p>
<p>I think that this ‘features focused’ development style can cause people to
ignore too much of the structure that the features contribute to
(or even that the features are <em>destroying</em> structure).
Programming language ‘design’ needs a lot of what goes in the ‘monoid’ camp. That
is, they should be treated as more of an abstract thing that gives some
structure to computation. Ignoring this aspect of development is what leads to
edge cases, unintuitive behaviour, and this general feeling of ‘poor design’.</p>
<p>How many people have been surprised to learn that <a href="http://www.walkingrandomly.com/?p=5380">floating point addition is not
associative</a>? It seems reasonable to
just expect addition to be associative. Many programming language
<a href="https://www.destroyallsoftware.com/talks/wat">‘wats’</a> exist for a similar
reason - they are examples of a language behaving counter to our expectations.
In both these cases there are implicit ‘structural contracts’ that are violated.
Hidden patterns about how things relate to each other that are so common we just take
them for granted, but are not present in certain systems by design.</p>
<p>So I think a big part of what makes a language feel ‘discovered’ as opposed to
‘invented’ is the amount of attention paid to the structure of the thing.
‘Discovered’-seeming languages have more internal consistency and fewer
‘quirks’, because they’re not meant to <em>just</em> ‘turn descriptions of computations
into binary’. They have to do this in a way that adheres to a consistent,
coherent structure of computation.</p>]]>
    </content>
    
</entry><entry>
    <title>Turning bottom-up into top-down with Reverse State</title>
    <link href="https://blog.ielliott.io/topsy-turvy-reverse-state" />
    
    <id>https://blog.ielliott.io/topsy-turvy-reverse-state</id>
    
    <published>2018-06-13T00:00:00Z</published>
    <updated>2023-05-01T10:23+00:00</updated>
    <summary type="html"><![CDATA[<p>I love <a href="https://hackage.haskell.org/package/bound">bound</a> - it makes <a href="https://en.wikipedia.org/wiki/De_Bruijn_index">De
Bruijn indices</a> mindlessly easy. I also love
<a href="https://hackage.haskell.org/package/lens/docs/Control-Lens-Plated.html">Plated</a>
for all sorts of whole-program transformations. I think they’re two
indispensible tools for working with programming languages.
Unfortunately, they’re not compatible.</p>]]></summary>
    
    <content type="html" xml:base="https://blog.ielliott.io/topsy-turvy-reverse-state">
      <![CDATA[<p>I love <a href="https://hackage.haskell.org/package/bound">bound</a> - it makes <a href="https://en.wikipedia.org/wiki/De_Bruijn_index">De
Bruijn indices</a> mindlessly easy. I also love
<a href="https://hackage.haskell.org/package/lens/docs/Control-Lens-Plated.html">Plated</a>
for all sorts of whole-program transformations. I think they’re two
indispensible tools for working with programming languages.
Unfortunately, they’re not compatible.</p>
<p>The <a href="https://hackage.haskell.org/package/bound/docs/Bound.html#t:Scope">Scope
datatype</a>
in <code>bound</code> is very safe. The type prevents you from creating invalid De
Bruijn terms, like <code>λ. 3</code>. This means that you can’t write useful
instances of <code>Plated</code> for types which contain a <code>Scope</code>. When it comes
to choosing between <code>bound</code> and <code>Plated</code>, I choose <code>Plated</code> - because we
can use it to build functionality similar to <code>bound</code>.</p>
<h2 id="write-some-code">Write some code!</h2>
<h3 id="warning-the-code-in-this-post-is-subtly-broken.-see-the-reddit-thread">Warning: the code in this post is subtly broken. See the <a href="https://www.reddit.com/r/haskell/comments/8qs2gc/turning_bottomup_into_topdown_with_reverse_state/">reddit thread</a></h3>
<p>Let’s get some boilerplate out of the road. Here is a datatype for
lambda calculus, with De Bruijn indices (<code>B</code>), as well as free variables
(<code>F</code>). Notice that lambda abstraction (<code>Abs</code>) doesn’t give a name to the
function argument, which means that only <code>B</code>s can reference them. This
is called the “locally nameless” approach.</p>
<p><a href="../files/reverse-state.lhs">Literate Haskell source</a></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# language DeriveGeneric #-}</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.Lens.Plated</span> (<span class="dt">Plated</span>(..), gplate, transformM)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">GHC.Generics</span> (<span class="dt">Generic</span>)</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Control.Monad.RevState</span> <span class="kw">as</span> <span class="dt">Reverse</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Control.Monad.State</span> <span class="kw">as</span> <span class="dt">State</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Expr</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> <span class="dt">F</span> <span class="dt">String</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">B</span> <span class="dt">Int</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">App</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">Abs</span> <span class="dt">Expr</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>  <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>, <span class="dt">Generic</span>)</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Plated</span> <span class="dt">Expr</span> <span class="kw">where</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>  plate <span class="ot">=</span> gplate</span></code></pre></div>
<p>The core of the <code>bound</code>-like API will be two functions:</p>
<ul>
<li><code>abstract :: String -&gt; Expr -&gt; Expr</code></li>
<li><code>instantiate :: Expr -&gt; Expr -&gt; Maybe Expr</code></li>
</ul>
<p>Let’s do <code>abstract</code> first.</p>
<p><code>abstract name expr</code> finds all the <code>F name</code> nodes in an <code>expr</code> and
replaces them with the appropriate De Bruijn index, then wraps the final
result in an <code>Abs</code>. The “appropriate index” is the number of <code>Abs</code>
constructors that we passed on the way.</p>
<p>For example, <code>abstract "x" (F "x")</code> evaluates to <code>Abs (B 0)</code>, because we
passed zero <code>Abs</code> constructors to get to the <code>"x"</code>, then wrapped the final
result in an <code>Abs</code>. <code>abstract "y" (Abs (App (B 0) (F "y")))</code> evaluates to
<code>Abs (Abs (App (B 0) (B 1)))</code> because we passed one <code>Abs</code> to get to the
<code>"y"</code>, then wrapped the final result in an <code>Abs</code>.</p>
<p>“Do this everywhere” usually means
<a href="https://hackage.haskell.org/package/lens/docs/Control-Lens-Plated.html#v:transform">transform</a> <code>:: Plated a =&gt; (a -&gt; a) -&gt; a -&gt; a</code> is appropriate. Though
in this case, it doesn’t give us any way to count the number of <code>Abs</code> it
passes. Instead we will use <a href="https://hackage.haskell.org/package/lens/docs/Control-Lens-Plated.html#v:transformM">transformM</a> <code>:: (Monad m, Plated a) =&gt; (a -&gt; m a) -&gt; a -&gt; m a</code>
with <a href="https://hackage.haskell.org/package/mtl/docs/Control-Monad-State.html">State</a>.</p>
<p>Here’s how that looks:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">abstract_attempt_1 ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>abstract_attempt_1 name <span class="ot">=</span> <span class="dt">Abs</span> <span class="op">.</span> <span class="fu">flip</span> State.evalState <span class="dv">0</span> <span class="op">.</span> transformM fun</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ot">    fun ::</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">State.State</span> <span class="dt">Int</span> <span class="dt">Expr</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    fun (<span class="dt">F</span> name&#39;)</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>      <span class="op">|</span> name <span class="op">==</span> name&#39; <span class="ot">=</span> <span class="dt">B</span> <span class="op">&lt;$&gt;</span> State.get</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>      <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> <span class="fu">pure</span> <span class="op">$</span> <span class="dt">F</span> name&#39;</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    fun (<span class="dt">Abs</span> expr) <span class="ot">=</span> <span class="dt">Abs</span> expr <span class="op">&lt;$</span> State.modify (<span class="op">+</span><span class="dv">1</span>)</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    fun expr <span class="ot">=</span> <span class="fu">pure</span> expr</span></code></pre></div>
<p>If you see a free variable with the name we’re abstracting over, replace
it with a De Bruijn index corresponding to the number of binders we’ve
seen. If you see an <code>Abs</code>, increment the counter. If you see something
else, don’t do anything special.</p>
<p>This is the right idea, but it doesn’t work because the <code>transform</code>
family of functions act from the bottom up. When it sees a free variable
it can abstract over, it will replace it with <code>B 0</code>, then go upwards
through the tree, incrementing the counter. This is the <em>reverse</em> of
what we want.</p>
<h2 id="etats">etatS</h2>
<p>Enter <a href="http://hackage.haskell.org/package/rev-state/docs/Control-Monad-Trans-RevState.html">Reverse
State</a>.
In reverse state, <code>get</code> accesses the state of the computation <em>after</em>
it, not before it. Using regular state,
<code>execState (modify (+1) *&gt; modify (*2)) 0</code> will evaluate to <code>2</code>, because
you set the state to zero, add one, then multiply by two. Using reverse
state, the output is <code>1</code>, because you set the state to zero, multiply by
two, then add one.</p>
<p>This means that if we swap regular state for reverse state in
<code>abstract</code>, <code>get</code> refers to a state which is only calculated <em>after</em>
bubbling all the way to the top, and counting all the <code>Abs</code>
constructors.</p>
<p>So the correct code looks like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">abstract ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>abstract name <span class="ot">=</span> <span class="dt">Abs</span> <span class="op">.</span> <span class="fu">flip</span> Reverse.evalState <span class="dv">0</span> <span class="op">.</span> transformM fun</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="ot">    fun ::</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Reverse.State</span> <span class="dt">Int</span> <span class="dt">Expr</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    fun (<span class="dt">F</span> name&#39;)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>      <span class="op">|</span> name <span class="op">==</span> name&#39; <span class="ot">=</span> <span class="dt">B</span> <span class="op">&lt;$&gt;</span> Reverse.get</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>      <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> <span class="fu">pure</span> <span class="op">$</span> <span class="dt">F</span> name&#39;</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    fun (<span class="dt">Abs</span> expr) <span class="ot">=</span> <span class="dt">Abs</span> expr <span class="op">&lt;$</span> Reverse.modify (<span class="op">+</span><span class="dv">1</span>)</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    fun expr <span class="ot">=</span> <span class="fu">pure</span> expr</span></code></pre></div>
<p>The logic remains the same, except now the state transformations run
backwards.</p>
<p>Now for <code>instantiate</code>.</p>
<p><code>instantiate (Abs body) x</code> substitutes <code>x</code> into
the appropriate positions in <code>body</code>, and wraps the final result in a
<code>Just</code>. If the first argument to <code>instantiate</code> is not an <code>Abs</code>, then the
result is <code>Nothing</code>. We substitute <code>x</code> everywhere we find a <code>B</code> that
contains the number of binders we have passed.</p>
<p>For example, <code>instantiate (Abs (B 0)) (F "x")</code> evaluates to
<code>Just (F "x")</code>, because we found a <code>B 0</code> when we had passed zero binders
(the outer <code>Abs</code> doesn’t count).
<code>instantiate (Abs (Abs (App (B 0) (B 1)))) (F "y")</code> evaluates to
<code>Just (Abs (App (B 0) (F "y")))</code>, because we found a <code>B 1</code> when we had
passed one binder. The <code>B 0</code> is not replaced because at that point, we
had passed one binder, and zero is not one.</p>
<p>We have the same problem as with <code>abstract</code>: counting binders proceeds
from the top down, but <code>transformM</code> works from the bottom up. We can use
reverse state again to solve this. Here’s the code:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">instantiate ::</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Expr</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>instantiate (<span class="dt">Abs</span> body) x <span class="ot">=</span> <span class="dt">Just</span> <span class="op">$</span> Reverse.evalState (transformM fun body) <span class="dv">0</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="ot">    fun ::</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Reverse.State</span> <span class="dt">Int</span> <span class="dt">Expr</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    fun (<span class="dt">B</span> n) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>      n&#39; <span class="ot">&lt;-</span> Reverse.get</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>      <span class="fu">pure</span> <span class="op">$</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>        <span class="kw">if</span> n <span class="op">==</span> n&#39;</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>        <span class="kw">then</span> x</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>        <span class="kw">else</span> <span class="dt">B</span> n</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    fun (<span class="dt">Abs</span> expr) <span class="ot">=</span> <span class="dt">Abs</span> expr <span class="op">&lt;$</span> Reverse.modify (<span class="op">+</span><span class="dv">1</span>)</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>    fun expr <span class="ot">=</span> <span class="fu">pure</span> expr</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>instantiate _ _ <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>And there we have it: a <code>bound</code>-like API for a datatype using <code>Plated</code>.</p>
<p>I think there are two pressing issues when comparing this code to
<code>bound</code>: correctness and generalisation. This approach allows you to
write bogus terms, like <code>Abs (B 3)</code>, whereas <code>bound</code> does not. I’m okay
with this, because I highly value the tools <code>Plated</code> provides.
Additionally, the <code>bound</code> combinators work over any term as long as it
is a <code>Monad</code>, so <code>abstract</code> and <code>instantiate</code> only have to be written
once, whereas we haven’t presented any means for generalisation of the
<code>Plated</code> approach.</p>
<p>This is easily fixed: in a follow-up post, I’ll
write about how we can use Backpacky Prisms to provide <code>abstract</code>
and <code>instantiate</code> as library functions.</p>]]>
    </content>
    
</entry><entry>
    <title>Comonad Transformers in the Wild</title>
    <link href="https://blog.ielliott.io/comonad-transformers-in-the-wild" />
    
    <id>https://blog.ielliott.io/comonad-transformers-in-the-wild</id>
    
    <published>2018-02-25T00:00:00Z</published>
    <updated>2023-05-01T10:23+00:00</updated>
    <summary type="html"><![CDATA[<p>A certain algorithmic puzzle website has a problem that goes like this…</p>]]></summary>
    
    <content type="html" xml:base="https://blog.ielliott.io/comonad-transformers-in-the-wild">
      <![CDATA[<p>A certain algorithmic puzzle website has a problem that goes like this…</p>
<pre><code>Given a grid of integers, find the largest product of n numbers which are
adjacent in the same direction (left, right, up, down, or diagonally)</code></pre>
<p>In this diagram, <code>A</code>, <code>B</code>, and <code>C</code> are diagonally adjacent:</p>
<pre><code>0 0 0 0
0 0 0 C
0 0 B 0
0 A 0 0 </code></pre>
<p>And in this one, <code>A</code>, <code>B</code>, and <code>C</code> are vertically adjacent:</p>
<pre><code>0 A 0 0
0 B 0 0
0 C 0 0
0 0 0 0 </code></pre>
<p>I initially solved the problem with this data structure and operations:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Grid</span> a</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> <span class="dt">Grid</span> </span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  {<span class="ot"> width ::</span> <span class="op">!</span><span class="dt">Int</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> height ::</span> <span class="op">!</span><span class="dt">Int</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> xPos ::</span> <span class="op">!</span><span class="dt">Int</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> yPos ::</span> <span class="op">!</span><span class="dt">Int</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> content ::</span> [[a]]</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="ot">focus ::</span> <span class="dt">Grid</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>focus (<span class="dt">Grid</span> _ _ x y g) <span class="ot">=</span> (g <span class="op">!!</span> y) <span class="op">!!</span> x</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="co">-- These operations return Nothing if we are at the edge of the grid,</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a><span class="co">-- otherwise increment/decrement xPos/yPos accordingly</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>up, left, down,<span class="ot"> right ::</span> <span class="dt">Grid</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">Grid</span> a)</span></code></pre></div>
<p>The idea being to walk through the grid, and for each position calculate the product of the adjacent elements. For example, the product of the focus and the two neighbours to its right would be:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">example1 ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> <span class="dt">Grid</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>example1 grid <span class="ot">=</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  (\b c <span class="ot">-&gt;</span> focus grid <span class="op">*</span> b <span class="op">*</span> c) <span class="op">&lt;$&gt;</span> </span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  <span class="fu">fmap</span> pos (right grid) <span class="op">&lt;*&gt;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  <span class="fu">fmap</span> pos (right <span class="op">&lt;=&lt;</span> right <span class="op">$</span> grid)</span></code></pre></div>
<p><code>Grid</code> can be given a <code>Comonad</code> instance, and this process of per-position calulation can be expressed using comonadic operations. If we plug the <code>example1</code> function into <code>extend</code>, we get the function <code>extend example1 :: Grid a -&gt; Grid (Maybe a)</code>. This function walks through the grid, and replaces each cell with the result of running <code>example1</code> on it and its neighbours.</p>
<p>This is cool in and of itself, but implementing <code>duplicate</code> or <code>extend</code> for <code>Grid</code> is tedious. <code>Grid</code> can actually be implemented as the composition of two comonads: <a href="https://hackage.haskell.org/package/comonad/docs/Control-Comonad-Env.html">Env</a> and <a href="https://hackage.haskell.org/package/comonad/docs/Control-Comonad-Store.html">Store</a>, which gives us the correct comonadic behaviour for free.</p>
<hr />
<p><a href="../files/grid_comonad.lhs">Literal Haskell source</a></p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.Applicative</span> (liftA2)</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.Monad</span> ((&lt;=&lt;))</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.Comonad</span> ((=&gt;&gt;), extract)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.Comonad.Env</span> (<span class="dt">EnvT</span>(..), ask)</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.Comonad.Store</span> (<span class="dt">Store</span>, store, peek, pos, seek)</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.List</span> (maximum)</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Dimensions</span> <span class="ot">=</span> (<span class="dt">Int</span>, <span class="dt">Int</span>)</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Position</span> <span class="ot">=</span> (<span class="dt">Int</span>, <span class="dt">Int</span>)</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Grid</span> a <span class="ot">=</span> <span class="dt">EnvT</span> <span class="dt">Dimensions</span> (<span class="dt">Store</span> <span class="dt">Position</span>) a</span></code></pre></div>
<p><code>EnvT e w a</code> is an environment of type <code>e</code> paired with an underlying comonad <code>w a</code>. We can inspect the environment with <code>ask :: ComonadEnv e w =&gt; w a -&gt; e</code>. <code>extract</code>ing from an <code>EnvT</code> just extracts from the underlying comonad, and ignores the environment. The dimensions of the grid are the environment because they remain static throughout the program.</p>
<p><code>Store s a</code> consists of some state <code>s</code>, and an “accessor” function of type <code>s -&gt; a</code>. <code>extract</code>ing a <code>Store</code> feeds its state into the accessor function. For <code>Grid</code>, the focus position is the state, and the accessor is a function that pulls out the corresponding element from some list of lists.</p>
<p>Three important functions on <code>Store</code> are:</p>
<ul>
<li><code>pos :: ComonadStore s w =&gt; w a -&gt; s</code></li>
<li><code>seek :: ComonadStore s w =&gt; s -&gt; w a -&gt; w a</code></li>
<li><code>peek :: ComonadStore s w =&gt; s -&gt; w a -&gt; a</code></li>
</ul>
<p><code>pos</code> returns the current state, <code>seek</code> replaces the state, and <code>peek</code> runs the accessor function on a different piece of state, leaving the actual state unchanged.</p>
<p>Here’s how we make a grid. Notice that the accessor function passed to <code>store</code> behaves like <code>focus</code>.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">mkGrid ::</span> [[a]] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">Grid</span> a)</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>mkGrid [] <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>mkGrid g<span class="op">@</span>(r<span class="op">:</span>rs)</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> rl <span class="ot">&lt;-</span> <span class="fu">length</span> r</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>  , <span class="fu">all</span> ((<span class="op">==</span>rl) <span class="op">.</span> <span class="fu">length</span>) rs <span class="ot">=</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>      <span class="dt">Just</span> <span class="op">$</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>      <span class="dt">EnvT</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>        (rl, <span class="fu">length</span> g)</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>        (store (\(x, y) <span class="ot">-&gt;</span> (g <span class="op">!!</span> y) <span class="op">!!</span> x) (<span class="dv">0</span>, <span class="dv">0</span>))</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>If the grid has no rows, or has rows of different lengths, return nothing. Otherwise, calculate the dimensions of the grid, and initialise the store pointing to the top-left cell in the grid.</p>
<p>Now we can implement <code>up, down, left, right</code>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">up ::</span> <span class="dt">Grid</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">Grid</span> a)</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>up g <span class="ot">=</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    (w, h) <span class="ot">=</span> ask g</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    (x, y) <span class="ot">=</span> pos g</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">in</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">if</span> y <span class="op">&gt;</span> <span class="dv">0</span> <span class="kw">then</span> <span class="dt">Just</span> (seek (x, y<span class="op">-</span><span class="dv">1</span>) g) <span class="kw">else</span> <span class="dt">Nothing</span> </span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="ot">left ::</span> <span class="dt">Grid</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">Grid</span> a)</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>left g <span class="ot">=</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>    (w, h) <span class="ot">=</span> ask g</span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>    (x, y) <span class="ot">=</span> pos g</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>  <span class="kw">in</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>    <span class="kw">if</span> x <span class="op">&gt;</span> <span class="dv">0</span> <span class="kw">then</span> <span class="dt">Just</span> (seek (x<span class="op">-</span><span class="dv">1</span>, y) g) <span class="kw">else</span> <span class="dt">Nothing</span> </span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a><span class="ot">down ::</span> <span class="dt">Grid</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">Grid</span> a)</span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a>down g <span class="ot">=</span></span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span></span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a>    (w, h) <span class="ot">=</span> ask g</span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a>    (x, y) <span class="ot">=</span> pos g</span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>  <span class="kw">in</span></span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>    <span class="kw">if</span> y <span class="op">&lt;</span> h<span class="op">-</span><span class="dv">1</span> <span class="kw">then</span> <span class="dt">Just</span> (seek (x, y<span class="op">+</span><span class="dv">1</span>) g) <span class="kw">else</span> <span class="dt">Nothing</span> </span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a><span class="ot">right ::</span> <span class="dt">Grid</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">Grid</span> a)</span>
<span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a>right g <span class="ot">=</span></span>
<span id="cb8-27"><a href="#cb8-27" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span></span>
<span id="cb8-28"><a href="#cb8-28" aria-hidden="true" tabindex="-1"></a>    (w, h) <span class="ot">=</span> ask g</span>
<span id="cb8-29"><a href="#cb8-29" aria-hidden="true" tabindex="-1"></a>    (x, y) <span class="ot">=</span> pos g</span>
<span id="cb8-30"><a href="#cb8-30" aria-hidden="true" tabindex="-1"></a>  <span class="kw">in</span></span>
<span id="cb8-31"><a href="#cb8-31" aria-hidden="true" tabindex="-1"></a>    <span class="kw">if</span> x <span class="op">&lt;</span> w<span class="op">-</span><span class="dv">1</span> <span class="kw">then</span> <span class="dt">Just</span> (seek (x<span class="op">+</span><span class="dv">1</span>, y) g) <span class="kw">else</span> <span class="dt">Nothing</span> </span></code></pre></div>
<p>Next are some helper functions for calculating the product of a grid element and its neighbours.</p>
<p><code>iterateM</code> is the monadic equivalent of <a href="https://hackage.haskell.org/package/base/docs/Data-List.html#v:iterate">iterate</a>.</p>
<p><code>productN</code> calculates the product of the current grid element with its adjacent neighbours in some direction. <code>example1</code> could be redefined as <code>productN 3 right</code>.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">iterateM ::</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> m a) <span class="ot">-&gt;</span> [a <span class="ot">-&gt;</span> m a]</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>iterateM f <span class="ot">=</span> f <span class="op">:</span> <span class="fu">fmap</span> (f <span class="op">&lt;=&lt;</span>) (iterateM f)</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="ot">productN ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> (<span class="dt">Grid</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">Grid</span> a)) <span class="ot">-&gt;</span> <span class="dt">Grid</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>productN n f g <span class="ot">=</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  <span class="fu">foldr</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    (\a b <span class="ot">-&gt;</span> liftA2 (<span class="op">*</span>) (extract <span class="op">&lt;$&gt;</span> a g) b)</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>    (<span class="fu">pure</span> <span class="dv">1</span>)</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    (<span class="fu">take</span> n <span class="op">$</span> iterateM f)</span></code></pre></div>
<p>Penultimately, we define a function for finding the greatest element in a grid. It <code>peek</code>s at all the elements and finds the greatest one.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">maxInGrid ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> <span class="dt">Grid</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>maxInGrid g <span class="ot">=</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>    (w, h) <span class="ot">=</span> ask g</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">in</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>    <span class="fu">maximum</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>      x <span class="ot">&lt;-</span> [<span class="dv">0</span><span class="op">..</span>w<span class="op">-</span><span class="dv">1</span>]</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>      y <span class="ot">&lt;-</span> [<span class="dv">0</span><span class="op">..</span>h<span class="op">-</span><span class="dv">1</span>]</span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>      <span class="fu">pure</span> <span class="op">$</span> peek (x, y) g</span></code></pre></div>
<p>Last step. To find the largest product of <code>n</code> adjacent elements, we find the largest product of <code>n</code> adjacent elements horizontally, then vertically, then diagonally, and take the maximum of those.</p>
<p>We can write this logic as a series of <code>extend</code>s, because <code>productN n move</code> and <code>maxInGrid</code> are both of the form <code>w a -&gt; b</code>. (<code>(=&gt;&gt;)</code> is the flipped infix version of <code>extend</code>)</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ot">largestProduct ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Grid</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>largestProduct n g <span class="ot">=</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Just</span> g1 <span class="ot">=</span> extract <span class="op">$</span> g <span class="op">=&gt;&gt;</span> productN n right            <span class="op">=&gt;&gt;</span> maxInGrid</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Just</span> g2 <span class="ot">=</span> extract <span class="op">$</span> g <span class="op">=&gt;&gt;</span> productN n down             <span class="op">=&gt;&gt;</span> maxInGrid</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Just</span> g3 <span class="ot">=</span> extract <span class="op">$</span> g <span class="op">=&gt;&gt;</span> productN n (down <span class="op">&lt;=&lt;</span> left)  <span class="op">=&gt;&gt;</span> maxInGrid</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Just</span> g4 <span class="ot">=</span> extract <span class="op">$</span> g <span class="op">=&gt;&gt;</span> productN n (down <span class="op">&lt;=&lt;</span> right) <span class="op">=&gt;&gt;</span> maxInGrid</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">in</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>    <span class="fu">maximum</span> [g1, g2, g3, g4]</span></code></pre></div>
<p>I’m still getting an intuition for comonads, but they seem to embody some kind of “environment”, and comonad transformers are like a “composition of environments”. In this example, there are two environments: the grid’s dimensions, and its content.</p>
<p>For more information about comonads, check out Bartosz Milewski’s <a href="https://bartoszmilewski.com/2017/01/02/comonads/">comonads post</a> and Dan Piponi’s article about <a href="http://blog.sigfpe.com/2006/12/evaluating-cellular-automata-is.html">comonadic cellular automata</a>.</p>
<p>Footnote: I feel like <code>largestProduct</code> could be simplified if <code>Grid</code> were <code>ComonadApply</code>, but I haven’t tried to figure it out yet.</p>]]>
    </content>
    
</entry><entry>
    <title>Continuations From the Ground Up</title>
    <link href="https://blog.ielliott.io/continuations-from-the-ground-up" />
    
    <id>https://blog.ielliott.io/continuations-from-the-ground-up</id>
    
    <published>2017-06-06T00:00:00Z</published>
    <updated>2023-05-01T10:23+00:00</updated>
    <summary type="html"><![CDATA[<p>It’s difficult to learn functional programming without hearing about continuations. Often they’re mentioned while talking about boosting the performance of pure functional code, sometimes there’s talk of control flow, and occasionally with ‘time-travel’ thrown in there to make it all seem more obscure. It’s all true, but let’s start from the beginning.</p>]]></summary>
    
    <content type="html" xml:base="https://blog.ielliott.io/continuations-from-the-ground-up">
      <![CDATA[<p>It’s difficult to learn functional programming without hearing about continuations. Often they’re mentioned while talking about boosting the performance of pure functional code, sometimes there’s talk of control flow, and occasionally with ‘time-travel’ thrown in there to make it all seem more obscure. It’s all true, but let’s start from the beginning.</p>
<p>This post was generated from a <a href="../files/continuations.lhs">Literate Haskell file</a> using Pandoc, so you can load it up into GHCI and play around if you want.</p>
<h2 id="continuation-passing-style">Continuation Passing Style</h2>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">CPS</span> <span class="kw">where</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.Applicative</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.Monad.Trans.Class</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.IORef</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Maybe</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Map</span> <span class="kw">as</span> <span class="dt">M</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">System.Exit</span> <span class="kw">as</span> <span class="dt">E</span></span></code></pre></div>
<p>The main idea of this style is that the called function has control over how its return value is used. Usually, the caller will pass a function that tells the callee how to use its return value. Here’s what that looks like:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">add ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>add a b <span class="ot">=</span> \k <span class="ot">-&gt;</span> k (a <span class="op">+</span> b)</span></code></pre></div>
<p><code>add</code> takes two numbers, plus a function that will take the result and do something (returning an unknown answer), then pass the result to this function. We call this ‘extra function’ a <em>continuation</em> because it specifies how the program should <em>continue</em>.</p>
<p>It’s possible to write any program using this style. I’m not going to prove it. As a challenge, let’s restrict ourselves to write every function this way, with two exceptions:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">exitSuccess ::</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>exitSuccess _ <span class="ot">=</span> E.exitSuccess</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="ot">exitFailure ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>exitFailure <span class="ot">=</span> E.exitWith <span class="op">.</span> <span class="dt">E.ExitFailure</span></span></code></pre></div>
<p><code>exitSuccess</code> and <code>exitFailure</code> do not take a continuation, because the program always ends when they are called.</p>
<p>Let’s define <code>mul</code> and <code>dvd</code>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">mul ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>mul a b <span class="ot">=</span> \k <span class="ot">-&gt;</span> k (a <span class="op">*</span> b)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="ot">dvd ::</span> <span class="dt">Fractional</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>dvd a b <span class="ot">=</span> \k <span class="ot">-&gt;</span> k (a <span class="op">/</span> b)</span></code></pre></div>
<p>Now we can write some programs using this style.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Exits with status code 5</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="ot">prog_1 ::</span> <span class="dt">IO</span> ()</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>prog_1 <span class="ot">=</span> add <span class="dv">2</span> <span class="dv">3</span> exitFailure</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- Exits successfully after multiplying 10 by 10</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="ot">prog_2 ::</span> <span class="dt">IO</span> ()</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>prog_2 <span class="ot">=</span> mul <span class="dv">10</span> <span class="dv">10</span> exitSuccess</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="co">-- Exits with status code (2 + 3) * 5 = 25</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="ot">prog_3 ::</span> <span class="dt">IO</span> ()</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>prog_3 <span class="ot">=</span> add <span class="dv">2</span> <span class="dv">3</span> (\two_plus_three <span class="ot">-&gt;</span> mul two_plus_three <span class="dv">5</span> exitFailure)</span></code></pre></div>
<p>We can factor out the continuation to make our program more modular:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Equivalent to \k -&gt; k ((2 + 3) * 5)</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="ot">prog_4 ::</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>prog_4 <span class="ot">=</span> \k <span class="ot">-&gt;</span> add <span class="dv">2</span> <span class="dv">3</span> (\two_plus_three <span class="ot">-&gt;</span> mul two_plus_three <span class="dv">5</span> k)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- Equivalent to \k -&gt; k ((2 + 3) * 5 + 5)</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="ot">prog_5 ::</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>prog_5 <span class="ot">=</span> \k <span class="ot">-&gt;</span> prog_4 (\res <span class="ot">-&gt;</span> add res <span class="dv">5</span> k)</span></code></pre></div>
<p>In these kind of definitions, we’ll call the <code>k</code> the <em>current continuation</em> to stand for <em>how the program will (currently) continue execution</em>.</p>
<p>Here’s a more complex expression:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- (2 + 3) * (7 + 9) + 5</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="ot">prog_6 ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>prog_6 <span class="ot">=</span> \k <span class="ot">-&gt;</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  add <span class="dv">2</span> <span class="dv">3</span> (\five <span class="ot">-&gt;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    add <span class="dv">7</span> <span class="dv">9</span> (\sixteen <span class="ot">-&gt;</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>      mul five sixteen (\eighty <span class="ot">-&gt;</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>        add eighty <span class="dv">5</span> k)))</span></code></pre></div>
<p>In translating programs to continuation passing style, we transform a <em>tree</em> of computations into a <em>sequence</em> of computations. In doing so, we have <em>reified</em> the flow of the program. We now have a data structure in memory that represents the computations that make up the program. In this case, the data structure is a lot like a linked list- there is a head: ‘the computation that will be performed next’, and a tail: ‘the computations that will be performed on the result’. It’s this ability to represent the flow of the program as a data structure that sets CPS programs apart from regular programs, which we will see later.</p>
<h2 id="continuation-passing-is-monadic">Continuation Passing is Monadic</h2>
<p>Right now, writing CPS programs in Haskell is too verbose. Fortunately there are some familiar abstractions that will make it elegant:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Cont</span> r a <span class="ot">=</span> <span class="dt">Cont</span> {<span class="ot"> runCont ::</span> (a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r }</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="ot">add&#39; ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Cont</span> r a</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>add&#39; a b <span class="ot">=</span> <span class="dt">Cont</span> <span class="op">$</span> add a b</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="ot">mul&#39; ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Cont</span> r a</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>mul&#39; a b <span class="ot">=</span> <span class="dt">Cont</span> <span class="op">$</span> mul a b</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="ot">dvd&#39; ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Cont</span> r a</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>dvd&#39; a b <span class="ot">=</span> <span class="dt">Cont</span> <span class="op">$</span> dvd a b</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Functor</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>  <span class="fu">fmap</span> f c <span class="ot">=</span> <span class="dt">Cont</span> <span class="op">$</span> \k <span class="ot">-&gt;</span> runCont c (k <span class="op">.</span> f)</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Applicative</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> a <span class="ot">=</span> <span class="dt">Cont</span> (<span class="op">$</span> a)</span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>  cf <span class="op">&lt;*&gt;</span> ca <span class="ot">=</span> <span class="dt">Cont</span> <span class="op">$</span> \k <span class="ot">-&gt;</span> runCont cf (\f <span class="ot">-&gt;</span> runCont ca (\a <span class="ot">-&gt;</span> k (f a)))</span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Monad</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a>  ca <span class="op">&gt;&gt;=</span> f <span class="ot">=</span> <span class="dt">Cont</span> <span class="op">$</span> \k <span class="ot">-&gt;</span> runCont ca (\a <span class="ot">-&gt;</span> runCont (f a) k)</span></code></pre></div>
<p>It turns out that the return type of these CPS programs, <code>(a -&gt; r) -&gt; r</code>, is a Monad. If you don’t understand these implementations, meditate on them until you do. Here some hand-wave-y English explanations that may help:</p>
<h3 id="functor">Functor</h3>
<p><code>fmap</code>: Continue with the result of <code>c</code> by changing the result from an <code>a</code> to a <code>b</code> then sending that result to the current continuation.</p>
<h3 id="applicative">Applicative</h3>
<p><code>pure</code>: Send an <code>a</code> to the current continuation</p>
<p><code>&lt;*&gt;</code>: Continue with the result of <code>cf</code> by continuing with the result of <code>ca</code> by sending (the result of <code>cf</code>) applied to (the result of <code>ca</code>) to the current continuation.</p>
<h3 id="monad">Monad</h3>
<p><code>&gt;&gt;=</code>: Continue with the result of <code>ca</code> by applying it to <code>f</code> and passing the current continuation on to the value <code>f</code> returned.</p>
<p>So now we can rewrite our previous verbose example:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">prog_6&#39; ::</span> <span class="dt">Cont</span> r <span class="dt">Int</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>prog_6&#39; <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  five <span class="ot">&lt;-</span> add&#39; <span class="dv">2</span> <span class="dv">3</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  sixteen <span class="ot">&lt;-</span> add&#39; <span class="dv">7</span> <span class="dv">9</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>  eighty <span class="ot">&lt;-</span> mul&#39; five sixteen</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  add&#39; eighty <span class="dv">5</span></span></code></pre></div>
<p>and run it:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">prog_7 ::</span> <span class="dt">IO</span> ()</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>prog_7 <span class="ot">=</span> runCont prog_6&#39; exitSuccess</span></code></pre></div>
<h2 id="callcc">callCC</h2>
<p>Consider the following CPS program:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ot">prog_8 ::</span> (<span class="dt">Eq</span> a, <span class="dt">Fractional</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> (<span class="dt">Maybe</span> a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>prog_8 a b c <span class="ot">=</span> \k <span class="ot">-&gt;</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  add b c</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    (\b_plus_c <span class="ot">-&gt;</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>      <span class="kw">if</span> b_plus_c <span class="op">==</span> <span class="dv">0</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>        <span class="kw">then</span> k <span class="dt">Nothing</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>        <span class="kw">else</span> dvd a b_plus_c (k <span class="op">.</span> <span class="dt">Just</span>))</span></code></pre></div>
<p>It adds <code>b</code> to <code>c</code>, then if <code>b + c</code> is zero, sends <code>Nothing</code> to the current continuation, otherwise divides <code>a</code> by <code>b + c</code> then continues by wrapping that in a <code>Just</code> and sending the <code>Just</code> result to the current continuation.</p>
<p>Because the current continuation is ‘how the program will continue with the result of this function’, sending a result to the current continuation early cause the function to <em>exit early</em>. In this sense, it’s a bit like like a <code>jmp</code> or a <code>goto</code>.</p>
<p>It is conceivable that somehow we can write a program like this using the <code>Cont</code> monad. This is where <code>callCC</code> comes in.</p>
<p><code>callCC</code> stands for ‘call with current continuation’, and is the way we’re going to bring the current continuation into scope when writing CPS programs. Here’s an example of how the previous code snippet should look using <code>callCC</code>:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ot">prog_8&#39; ::</span> (<span class="dt">Eq</span> a, <span class="dt">Fractional</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Cont</span> r (<span class="dt">Maybe</span> a)</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>prog_8&#39; a b c <span class="ot">=</span> callCC <span class="op">$</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>  \k <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>    b_plus_c <span class="ot">&lt;-</span> add&#39; b c</span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">if</span> b_plus_c <span class="op">==</span> <span class="dv">0</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>      <span class="kw">then</span> k <span class="dt">Nothing</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>      <span class="kw">else</span> <span class="fu">fmap</span> <span class="dt">Just</span> <span class="op">$</span> dvd&#39; a b_plus_c</span></code></pre></div>
<p>Here’s how <code>callCC</code> is defined:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="ot">callCC ::</span> ((a <span class="ot">-&gt;</span> <span class="dt">Cont</span> r b) <span class="ot">-&gt;</span> <span class="dt">Cont</span> r a) <span class="ot">-&gt;</span> <span class="dt">Cont</span> r a</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>callCC f <span class="ot">=</span> <span class="dt">Cont</span> <span class="op">$</span> \k <span class="ot">-&gt;</span> runCont (f (\a <span class="ot">-&gt;</span> <span class="dt">Cont</span> <span class="op">$</span> <span class="fu">const</span> (k a))) k</span></code></pre></div>
<p>We can see that the current continuation is permanently captured when it is used in the function passed to <code>f</code>, but it is also used when running the final result of <code>f</code>. So <code>k</code> might be called somewhere inside <code>f</code>, causing <code>f</code> to exit early, or it might not, in which case <code>k</code> is guaranteed to be called after <code>f</code> has finished.</p>
<p>Earlier I said that invoking the current continuation earlier is like jumping. This is a lot easier to show now that we can use it in our <code>Cont</code> monad. Calling the continuation provided by <code>callCC</code> will jump the program execution to immediately after the call to <code>callCC</code>, and set the result of the <code>callCC</code> continuation to the argument that was passed to the current continuation.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>prog_9 <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>  five <span class="ot">&lt;-</span> add&#39; <span class="dv">2</span> <span class="dv">3</span> </span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>  res <span class="ot">&lt;-</span> callCC <span class="op">$</span> \k <span class="ot">-&gt;</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- current continuation is never used, so `callCC` is redundant</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>    mul&#39; <span class="dv">4</span> <span class="dv">5</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- `res` = 20</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>  add&#39; five res</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>prog_10 <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>  five <span class="ot">&lt;-</span> add&#39; <span class="dv">2</span> <span class="dv">3</span> </span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>  res <span class="ot">&lt;-</span> callCC <span class="op">$</span> \k <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>    k <span class="dv">5</span></span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a>    mul&#39; <span class="dv">4</span> <span class="dv">5</span> <span class="co">-- this computation is never run</span></span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- program jumps to here, `res` = 5</span></span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a>  add&#39; five res</span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a>prog_11 <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb14-18"><a href="#cb14-18" aria-hidden="true" tabindex="-1"></a>  five <span class="ot">&lt;-</span> add&#39; <span class="dv">2</span> <span class="dv">3</span> </span>
<span id="cb14-19"><a href="#cb14-19" aria-hidden="true" tabindex="-1"></a>  res <span class="ot">&lt;-</span> callCC <span class="op">$</span> \k <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb14-20"><a href="#cb14-20" aria-hidden="true" tabindex="-1"></a>    <span class="kw">if</span> five <span class="op">&gt;</span> <span class="dv">10</span></span>
<span id="cb14-21"><a href="#cb14-21" aria-hidden="true" tabindex="-1"></a>      <span class="kw">then</span> k <span class="dv">10</span> <span class="co">-- branch A</span></span>
<span id="cb14-22"><a href="#cb14-22" aria-hidden="true" tabindex="-1"></a>      <span class="kw">else</span> mul&#39; <span class="dv">4</span> <span class="dv">5</span> <span class="co">-- branch B</span></span>
<span id="cb14-23"><a href="#cb14-23" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- if branch A was reached, `res` = 10</span></span>
<span id="cb14-24"><a href="#cb14-24" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- if branch B was reached, `res` = 20</span></span>
<span id="cb14-25"><a href="#cb14-25" aria-hidden="true" tabindex="-1"></a>  add&#39; five res</span></code></pre></div>
<h2 id="another-level-of-abstraction">Another level of abstraction</h2>
<p>We can also embed arbitrary effects in the return type of <code>Cont</code>. In other words, we can create a monad transformer.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">ContT</span> r m a <span class="ot">=</span> <span class="dt">ContT</span> {<span class="ot"> runContT ::</span> (a <span class="ot">-&gt;</span> m r) <span class="ot">-&gt;</span> m r }</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="ot">callCC&#39; ::</span> ((a <span class="ot">-&gt;</span> <span class="dt">ContT</span> r m b) <span class="ot">-&gt;</span> <span class="dt">ContT</span> r m a) <span class="ot">-&gt;</span> <span class="dt">ContT</span> r m a</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>callCC&#39; f <span class="ot">=</span> <span class="dt">ContT</span> <span class="op">$</span> \k <span class="ot">-&gt;</span> runContT (f (\a <span class="ot">-&gt;</span> <span class="dt">ContT</span> <span class="op">$</span> <span class="fu">const</span> (k a))) k</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Functor</span> (<span class="dt">ContT</span> r m) <span class="kw">where</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>  <span class="fu">fmap</span> f c <span class="ot">=</span> <span class="dt">ContT</span> <span class="op">$</span> \k <span class="ot">-&gt;</span> runContT c (k <span class="op">.</span> f)</span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Applicative</span> (<span class="dt">ContT</span> r m) <span class="kw">where</span></span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> a <span class="ot">=</span> <span class="dt">ContT</span> (<span class="op">$</span> a)</span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a>  cf <span class="op">&lt;*&gt;</span> ca <span class="ot">=</span> <span class="dt">ContT</span> <span class="op">$</span> \k <span class="ot">-&gt;</span> runContT cf (\f <span class="ot">-&gt;</span> runContT ca (\a <span class="ot">-&gt;</span> k (f a)))</span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Monad</span> (<span class="dt">ContT</span> r m) <span class="kw">where</span></span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a>  ca <span class="op">&gt;&gt;=</span> f <span class="ot">=</span> <span class="dt">ContT</span> <span class="op">$</span> \k <span class="ot">-&gt;</span> runContT ca (\a <span class="ot">-&gt;</span> runContT (f a) k)</span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-16"><a href="#cb15-16" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">MonadTrans</span> (<span class="dt">ContT</span> r) <span class="kw">where</span></span>
<span id="cb15-17"><a href="#cb15-17" aria-hidden="true" tabindex="-1"></a>  lift ma <span class="ot">=</span> <span class="dt">ContT</span> <span class="op">$</span> \k <span class="ot">-&gt;</span> ma <span class="op">&gt;&gt;=</span> k</span></code></pre></div>
<p>Notice that the <code>Functor</code>, <code>Applicative</code> and <code>Monad</code> instances for <code>ContT r m</code> don’t place any constraints on the <code>m</code>. This means that any type constructor of kind <code>(* -&gt; *)</code> can be in the <code>m</code> position. The <code>MonadTrans</code> instance, however, does require <code>m</code> is a monad. It’s a very simple definition- the result of running the lifted action is piped into the current continuation using <code>&gt;&gt;=</code>.</p>
<p>Now that we have a fully-featured CPS monad, we can start doing magic.</p>
<h2 id="the-future-the-past-and-alternate-timelines">The future, the past and alternate timelines</h2>
<p>The continuation that <code>callCC</code> provides access to is the current future of program execution as a single function. That’s why this program-as-a-linear-sequence is so powerful. If you could save the current continuation and call it at a later time somewhere else in your (CPS) program, it would jump ‘back in time’ to the point after that particular <code>callCC</code>.</p>
<p>To demonstrate this, and end with a bang, here’s a simple boolean SAT solver.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Language of boolean expressions</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Expr</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> <span class="dt">Implies</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">Iff</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">And</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">Or</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">Not</span> <span class="dt">Expr</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">Val</span> <span class="dt">Bool</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">Var</span> <span class="dt">String</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a>  <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>)</span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a><span class="co">-- Reduces a boolean expression to normal form, substituting variables</span></span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a><span class="co">-- where possible. There are also some equivalences that are necessary to get</span></span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true" tabindex="-1"></a><span class="co">-- the SAT solver working e.g. Not (Not x) = x (I said it was a simple one!)</span></span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true" tabindex="-1"></a>eval</span>
<span id="cb16-16"><a href="#cb16-16" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">M.Map</span> <span class="dt">String</span> <span class="dt">Expr</span> <span class="co">-- ^ Bound variables</span></span>
<span id="cb16-17"><a href="#cb16-17" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Expr</span> <span class="co">-- ^ Input expression</span></span>
<span id="cb16-18"><a href="#cb16-18" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Expr</span></span>
<span id="cb16-19"><a href="#cb16-19" aria-hidden="true" tabindex="-1"></a>eval env expr <span class="ot">=</span></span>
<span id="cb16-20"><a href="#cb16-20" aria-hidden="true" tabindex="-1"></a>  <span class="kw">case</span> expr <span class="kw">of</span></span>
<span id="cb16-21"><a href="#cb16-21" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Implies</span> p q <span class="ot">-&gt;</span> eval env <span class="op">$</span> <span class="dt">Or</span> (<span class="dt">Not</span> p) q</span>
<span id="cb16-22"><a href="#cb16-22" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Iff</span> p q <span class="ot">-&gt;</span> eval env <span class="op">$</span> <span class="dt">Or</span> (<span class="dt">And</span> p q) (<span class="dt">And</span> (<span class="dt">Not</span> p) (<span class="dt">Not</span> q))</span>
<span id="cb16-23"><a href="#cb16-23" aria-hidden="true" tabindex="-1"></a>    <span class="dt">And</span> a b <span class="ot">-&gt;</span></span>
<span id="cb16-24"><a href="#cb16-24" aria-hidden="true" tabindex="-1"></a>      <span class="kw">case</span> (eval env a, eval env b) <span class="kw">of</span></span>
<span id="cb16-25"><a href="#cb16-25" aria-hidden="true" tabindex="-1"></a>        (<span class="dt">Val</span> <span class="dt">False</span>, _) <span class="ot">-&gt;</span> <span class="dt">Val</span> <span class="dt">False</span></span>
<span id="cb16-26"><a href="#cb16-26" aria-hidden="true" tabindex="-1"></a>        (_, <span class="dt">Val</span> <span class="dt">False</span>) <span class="ot">-&gt;</span> <span class="dt">Val</span> <span class="dt">False</span></span>
<span id="cb16-27"><a href="#cb16-27" aria-hidden="true" tabindex="-1"></a>        (<span class="dt">Val</span> <span class="dt">True</span>, b&#39;) <span class="ot">-&gt;</span> b&#39;</span>
<span id="cb16-28"><a href="#cb16-28" aria-hidden="true" tabindex="-1"></a>        (a&#39;, <span class="dt">Val</span> <span class="dt">True</span>) <span class="ot">-&gt;</span> a&#39;</span>
<span id="cb16-29"><a href="#cb16-29" aria-hidden="true" tabindex="-1"></a>        (a&#39;, b&#39;) <span class="ot">-&gt;</span> <span class="dt">And</span> a&#39; b&#39;</span>
<span id="cb16-30"><a href="#cb16-30" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Or</span> a b <span class="ot">-&gt;</span></span>
<span id="cb16-31"><a href="#cb16-31" aria-hidden="true" tabindex="-1"></a>      <span class="kw">case</span> (eval env a, eval env b) <span class="kw">of</span></span>
<span id="cb16-32"><a href="#cb16-32" aria-hidden="true" tabindex="-1"></a>        (<span class="dt">Val</span> <span class="dt">True</span>, _) <span class="ot">-&gt;</span> <span class="dt">Val</span> <span class="dt">True</span></span>
<span id="cb16-33"><a href="#cb16-33" aria-hidden="true" tabindex="-1"></a>        (_, <span class="dt">Val</span> <span class="dt">True</span>) <span class="ot">-&gt;</span> <span class="dt">Val</span> <span class="dt">True</span></span>
<span id="cb16-34"><a href="#cb16-34" aria-hidden="true" tabindex="-1"></a>        (<span class="dt">Val</span> <span class="dt">False</span>, b&#39;) <span class="ot">-&gt;</span> b&#39;</span>
<span id="cb16-35"><a href="#cb16-35" aria-hidden="true" tabindex="-1"></a>        (a&#39;, <span class="dt">Val</span> <span class="dt">False</span>) <span class="ot">-&gt;</span> a&#39;</span>
<span id="cb16-36"><a href="#cb16-36" aria-hidden="true" tabindex="-1"></a>        (a&#39;, b&#39;)</span>
<span id="cb16-37"><a href="#cb16-37" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span> a&#39; <span class="op">==</span> eval env (<span class="dt">Not</span> b&#39;) <span class="ot">-&gt;</span> <span class="dt">Val</span> <span class="dt">True</span></span>
<span id="cb16-38"><a href="#cb16-38" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">-&gt;</span> <span class="dt">Or</span> a&#39; b&#39;</span>
<span id="cb16-39"><a href="#cb16-39" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Not</span> a <span class="ot">-&gt;</span></span>
<span id="cb16-40"><a href="#cb16-40" aria-hidden="true" tabindex="-1"></a>      <span class="kw">case</span> eval env a <span class="kw">of</span></span>
<span id="cb16-41"><a href="#cb16-41" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Val</span> <span class="dt">True</span> <span class="ot">-&gt;</span> <span class="dt">Val</span> <span class="dt">False</span></span>
<span id="cb16-42"><a href="#cb16-42" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Val</span> <span class="dt">False</span> <span class="ot">-&gt;</span> <span class="dt">Val</span> <span class="dt">True</span></span>
<span id="cb16-43"><a href="#cb16-43" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Not</span> a&#39; <span class="ot">-&gt;</span> a&#39;</span>
<span id="cb16-44"><a href="#cb16-44" aria-hidden="true" tabindex="-1"></a>        a&#39; <span class="ot">-&gt;</span> <span class="dt">Not</span> a&#39;</span>
<span id="cb16-45"><a href="#cb16-45" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Val</span> b <span class="ot">-&gt;</span> <span class="dt">Val</span> b</span>
<span id="cb16-46"><a href="#cb16-46" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Var</span> name <span class="ot">-&gt;</span> fromMaybe (<span class="dt">Var</span> name) (M.lookup name env)</span>
<span id="cb16-47"><a href="#cb16-47" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-48"><a href="#cb16-48" aria-hidden="true" tabindex="-1"></a><span class="co">-- Returns `Nothing` if the expression is not satisfiable</span></span>
<span id="cb16-49"><a href="#cb16-49" aria-hidden="true" tabindex="-1"></a><span class="co">-- If the epxression is satisfiable returns `Just mapping` with a valid</span></span>
<span id="cb16-50"><a href="#cb16-50" aria-hidden="true" tabindex="-1"></a><span class="co">-- variable mapping</span></span>
<span id="cb16-51"><a href="#cb16-51" aria-hidden="true" tabindex="-1"></a><span class="ot">sat ::</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">ContT</span> r <span class="dt">IO</span> (<span class="dt">Maybe</span> (<span class="dt">M.Map</span> <span class="dt">String</span> <span class="dt">Expr</span>))</span>
<span id="cb16-52"><a href="#cb16-52" aria-hidden="true" tabindex="-1"></a>sat expr <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb16-53"><a href="#cb16-53" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- A stack of continuations</span></span>
<span id="cb16-54"><a href="#cb16-54" aria-hidden="true" tabindex="-1"></a>  try_next_ref <span class="ot">&lt;-</span> lift <span class="op">$</span> newIORef [] </span>
<span id="cb16-55"><a href="#cb16-55" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-56"><a href="#cb16-56" aria-hidden="true" tabindex="-1"></a>  callCC&#39; <span class="op">$</span> \exit <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb16-57"><a href="#cb16-57" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- Run `go` after reducing the expression to normal form without any</span></span>
<span id="cb16-58"><a href="#cb16-58" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- variable values</span></span>
<span id="cb16-59"><a href="#cb16-59" aria-hidden="true" tabindex="-1"></a>    res <span class="ot">&lt;-</span> go (eval M.empty expr) try_next_ref exit</span>
<span id="cb16-60"><a href="#cb16-60" aria-hidden="true" tabindex="-1"></a>    <span class="kw">case</span> res <span class="kw">of</span></span>
<span id="cb16-61"><a href="#cb16-61" aria-hidden="true" tabindex="-1"></a>      <span class="co">-- If there was a failure, backtrack and try again</span></span>
<span id="cb16-62"><a href="#cb16-62" aria-hidden="true" tabindex="-1"></a>      <span class="dt">Nothing</span> <span class="ot">-&gt;</span> backtrack try_next_ref exit</span>
<span id="cb16-63"><a href="#cb16-63" aria-hidden="true" tabindex="-1"></a>      <span class="dt">Just</span> vars <span class="ot">-&gt;</span> <span class="kw">case</span> eval vars expr <span class="kw">of</span></span>
<span id="cb16-64"><a href="#cb16-64" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- If the expression evaluates to true with the results of `go`, finish</span></span>
<span id="cb16-65"><a href="#cb16-65" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Val</span> <span class="dt">True</span> <span class="ot">-&gt;</span> exit res</span>
<span id="cb16-66"><a href="#cb16-66" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- Otherwise, backtrack and try again</span></span>
<span id="cb16-67"><a href="#cb16-67" aria-hidden="true" tabindex="-1"></a>        _ <span class="ot">-&gt;</span> backtrack try_next_ref exit</span>
<span id="cb16-68"><a href="#cb16-68" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-69"><a href="#cb16-69" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb16-70"><a href="#cb16-70" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- To backtrack: try to pop a continuation from the stack. If there are</span></span>
<span id="cb16-71"><a href="#cb16-71" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- none left, exit with failure. If there is a continuation then enter it.</span></span>
<span id="cb16-72"><a href="#cb16-72" aria-hidden="true" tabindex="-1"></a>    backtrack try_next_ref exit <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb16-73"><a href="#cb16-73" aria-hidden="true" tabindex="-1"></a>      try_next <span class="ot">&lt;-</span> lift <span class="op">$</span> readIORef try_next_ref</span>
<span id="cb16-74"><a href="#cb16-74" aria-hidden="true" tabindex="-1"></a>      <span class="kw">case</span> try_next <span class="kw">of</span></span>
<span id="cb16-75"><a href="#cb16-75" aria-hidden="true" tabindex="-1"></a>        [] <span class="ot">-&gt;</span> exit <span class="dt">Nothing</span></span>
<span id="cb16-76"><a href="#cb16-76" aria-hidden="true" tabindex="-1"></a>        next<span class="op">:</span>rest <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb16-77"><a href="#cb16-77" aria-hidden="true" tabindex="-1"></a>          lift <span class="op">$</span> writeIORef try_next_ref rest</span>
<span id="cb16-78"><a href="#cb16-78" aria-hidden="true" tabindex="-1"></a>          next</span>
<span id="cb16-79"><a href="#cb16-79" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb16-80"><a href="#cb16-80" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- It&#39;s a tree traversal, but with some twists</span></span>
<span id="cb16-81"><a href="#cb16-81" aria-hidden="true" tabindex="-1"></a>    go expr try_next_ref exit <span class="ot">=</span></span>
<span id="cb16-82"><a href="#cb16-82" aria-hidden="true" tabindex="-1"></a>      <span class="kw">case</span> expr <span class="kw">of</span></span>
<span id="cb16-83"><a href="#cb16-83" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- Twist 1: When we encounter a variable, we first continue as if it&#39;s</span></span>
<span id="cb16-84"><a href="#cb16-84" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- true, but also push a continuation on the stack where it is set to false</span></span>
<span id="cb16-85"><a href="#cb16-85" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Var</span> name <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb16-86"><a href="#cb16-86" aria-hidden="true" tabindex="-1"></a>          res <span class="ot">&lt;-</span> callCC&#39; <span class="op">$</span> \k <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb16-87"><a href="#cb16-87" aria-hidden="true" tabindex="-1"></a>            lift <span class="op">$</span> modifyIORef try_next_ref (k (<span class="dt">Val</span> <span class="dt">False</span>) <span class="op">:</span>)</span>
<span id="cb16-88"><a href="#cb16-88" aria-hidden="true" tabindex="-1"></a>            <span class="fu">pure</span> <span class="op">$</span> <span class="dt">Val</span> <span class="dt">True</span></span>
<span id="cb16-89"><a href="#cb16-89" aria-hidden="true" tabindex="-1"></a>          <span class="co">-- When this program is first run, `res` = True. But if we pop and</span></span>
<span id="cb16-90"><a href="#cb16-90" aria-hidden="true" tabindex="-1"></a>          <span class="co">-- enter the result of `k (Val False)`, we would end up back here</span></span>
<span id="cb16-91"><a href="#cb16-91" aria-hidden="true" tabindex="-1"></a>          <span class="co">-- again, with `res` = False</span></span>
<span id="cb16-92"><a href="#cb16-92" aria-hidden="true" tabindex="-1"></a>          <span class="fu">pure</span> <span class="op">$</span> <span class="dt">Just</span> (M.singleton name res)</span>
<span id="cb16-93"><a href="#cb16-93" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Val</span> b <span class="ot">-&gt;</span> <span class="fu">pure</span> <span class="op">$</span> <span class="kw">if</span> b <span class="kw">then</span> <span class="dt">Just</span> M.empty <span class="kw">else</span> <span class="dt">Nothing</span></span>
<span id="cb16-94"><a href="#cb16-94" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- Twist 2: When we get to an Or, only one of the sides needs to be</span></span>
<span id="cb16-95"><a href="#cb16-95" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- satisfied. So we first continue by checking the left side, but also</span></span>
<span id="cb16-96"><a href="#cb16-96" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- push a continuation where we check the right side instead.</span></span>
<span id="cb16-97"><a href="#cb16-97" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Or</span> a b <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb16-98"><a href="#cb16-98" aria-hidden="true" tabindex="-1"></a>          side <span class="ot">&lt;-</span> callCC&#39; <span class="op">$</span> \k <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb16-99"><a href="#cb16-99" aria-hidden="true" tabindex="-1"></a>            lift <span class="op">$</span> modifyIORef try_next_ref (k b <span class="op">:</span>)</span>
<span id="cb16-100"><a href="#cb16-100" aria-hidden="true" tabindex="-1"></a>            <span class="fu">pure</span> a</span>
<span id="cb16-101"><a href="#cb16-101" aria-hidden="true" tabindex="-1"></a>          <span class="co">-- Similar to the `Var` example. First ruvn, `side` = a. But if later</span></span>
<span id="cb16-102"><a href="#cb16-102" aria-hidden="true" tabindex="-1"></a>          <span class="co">-- we enter the saved continuation then we will return to this point</span></span>
<span id="cb16-103"><a href="#cb16-103" aria-hidden="true" tabindex="-1"></a>          <span class="co">-- in the program with `side` = b</span></span>
<span id="cb16-104"><a href="#cb16-104" aria-hidden="true" tabindex="-1"></a>          go side try_next_ref exit </span>
<span id="cb16-105"><a href="#cb16-105" aria-hidden="true" tabindex="-1"></a>        <span class="dt">And</span> a b <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb16-106"><a href="#cb16-106" aria-hidden="true" tabindex="-1"></a>          a_res <span class="ot">&lt;-</span> go a try_next_ref exit</span>
<span id="cb16-107"><a href="#cb16-107" aria-hidden="true" tabindex="-1"></a>          b_res <span class="ot">&lt;-</span> go b try_next_ref exit</span>
<span id="cb16-108"><a href="#cb16-108" aria-hidden="true" tabindex="-1"></a>          <span class="fu">pure</span> <span class="op">$</span> liftA2 M.union a_res b_res</span>
<span id="cb16-109"><a href="#cb16-109" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-110"><a href="#cb16-110" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Not</span> a <span class="ot">-&gt;</span> go a try_next_ref exit</span>
<span id="cb16-111"><a href="#cb16-111" aria-hidden="true" tabindex="-1"></a>        </span>
<span id="cb16-112"><a href="#cb16-112" aria-hidden="true" tabindex="-1"></a>        _ <span class="ot">-&gt;</span> go (eval M.empty expr) try_next_ref exit</span></code></pre></div>
<p>The solver sets all the variables to <code>True</code>, and if the full expression evaluates to <code>False</code> it flips one to <code>False</code> and automatically re-evaluates the expression, repeating the process untill either it finally evaluates to <code>True</code> or all possible combinations of boolean values have been tested. It’s not efficient, but it’s a wonderful illustration of the elegance that CPS enables.</p>]]>
    </content>
    
</entry><entry>
    <title>How to delete old NixOS boot configurations</title>
    <link href="https://blog.ielliott.io/how-to-delete-old-nixos-boot-configurations" />
    
    <id>https://blog.ielliott.io/how-to-delete-old-nixos-boot-configurations</id>
    
    <published>2017-03-24T00:00:00Z</published>
    <updated>2023-05-01T10:23+00:00</updated>
    <summary type="html"><![CDATA[<p><a href="https://nixos.org/">NixOS</a> is a Linux distribution with declarative
configuration management. Your system configuration is specified in a
set of files, and can run a command to update your system to the current
specification. A consequence of this is that your entire system
configuration can be versioned.</p>]]></summary>
    
    <content type="html" xml:base="https://blog.ielliott.io/how-to-delete-old-nixos-boot-configurations">
      <![CDATA[<p><a href="https://nixos.org/">NixOS</a> is a Linux distribution with declarative
configuration management. Your system configuration is specified in a
set of files, and can run a command to update your system to the current
specification. A consequence of this is that your entire system
configuration can be versioned.</p>
<p>Every time you rebuild your NixOS configuration, a new entry is added to
the bootloader. This is helpful if you ever make a configuration change
that breaks on your machine because you can reboot into the last known
working state and try something different.</p>
<p>If you don’t need to have access to all your old configurations, you
can delete them:</p>
<ol type="1">
<li><p><code>sudo nix-collect-garbage -d</code></p></li>
<li><p><code>sudo nixos-rebuild switch</code></p></li>
</ol>
<hr />
<p><em>30 December 2018</em></p>
<p>I don’t know if I was confused when I first wrote this, or if the process has
improved since then. Either way, these instructions are more complex
than necessary, so I’ve updated them.</p>
<ol type="1">
<li><p><del>Delete the old (excludes the current) package configurations for the
NixOS system <code>sudo nix-env -p /nix/var/nix/profiles/system    --delete-generations old</code></del></p></li>
<li><p><del>Collect garbage <code>nix-collect-garbage -d</code></del></p></li>
<li><p><del>View the remaining generation <code>nix-env -p /nix/var/nix/profiles/system    --list-generations</code>. Take note of this for the next step.</del></p></li>
<li><p><del>Remove unnecessary boot loader entries. I use <code>systemd-boot</code>, so all
my entries are located in <code>/boot/loader/entries</code>. To remove all the
old entries, run <code>sudo bash -c "cd /boot/loader/entries; ls | grep    -v &lt;current-generation-name&gt; | xargs rm"</code> (you might want to back up
the entries somewhere to be safe)</del></p></li>
</ol>]]>
    </content>
    
</entry><entry>
    <title>Introduction to Unification</title>
    <link href="https://blog.ielliott.io/introduction-to-unification" />
    
    <id>https://blog.ielliott.io/introduction-to-unification</id>
    
    <published>2017-01-07T00:00:00Z</published>
    <updated>2023-05-01T10:23+00:00</updated>
    <summary type="html"><![CDATA[<p>Unification is a vital process in the implementation of Hindley-Damas-Milner
type inference. In the <a href="http://web.cs.wpi.edu/~cs4536/c12/milner-damas_principal_types.pdf">original paper</a>
it is mentioned in passing as assumed knowledge, so here is an explanation of
unification in with a little help from the HM type theory.</p>]]></summary>
    
    <content type="html" xml:base="https://blog.ielliott.io/introduction-to-unification">
      <![CDATA[<p>Unification is a vital process in the implementation of Hindley-Damas-Milner
type inference. In the <a href="http://web.cs.wpi.edu/~cs4536/c12/milner-damas_principal_types.pdf">original paper</a>
it is mentioned in passing as assumed knowledge, so here is an explanation of
unification in with a little help from the HM type theory.</p>
<h2 id="what-is-unification">What is Unification?</h2>
<p>Unification is a method of solving equations by substitution. This sentence alone
doesn’t give enough information to implement an algorithm, so let’s define some
vocabulary to write a more rigorous definition.</p>
<p><code>term</code>: A term is an abstract syntax tree representing the language that will be used.
In order for unification to proceed, term must have some value that represents a
<code>variable</code>, and some values that represent <code>constants</code>- the idea being that <code>variables</code>
can be replaced during unification, but constants cannot.</p>
<p><code>equation</code>: An equation is a pair of terms, written <code>term_1 = term_2</code>.</p>
<p><code>syntactic equality</code>: Two terms are syntactically equal if their ASTs match
exactly.</p>
<p><code>equivalence</code>: Two terms are equivalent if there exists some substitution that would
make them syntactically equal.</p>
<p><code>solved</code>: An equation is solved if the left and right hand sides are syntactically
equal.</p>
<p><code>substitution</code>: A substitution is a set of mappings from variables to terms, written
<code>{ var_1 =&gt; term_1, ..., var_i =&gt; term_i }</code>.</p>
<p><code>application</code>: A substitution can be <code>applied</code> to a value containing variables - written <code>subs(value)</code>:</p>
<ul>
<li>term: by replacing variables with terms per each mapping</li>
<li>equation: by applying the substitution to both sides</li>
<li>set of equations: by applying the substitution to each element in the set</li>
<li>substitution: by applying the substitution to the right hand side of each mapping</li>
</ul>
<p>Applying an empty substitution to a value does not change the value.
For reasons that will be explained later, a substitution is only valid if every
variable on the left side of mapping does <em>not</em> occur in the term on the right
side of the respective mapping.</p>
<p><code>minimal</code>: A substitution is minimal if no variables in the right hand sides of
any mapping occur on any left hand side of any mapping. In other words, if
applying the substitution is idempotent: <code>subs(subs(value)) = subs(value)</code></p>
<p>With this vocabulary, we can now better define unification:</p>
<p><em>Given a set of equations <code>eqs</code>, find a minimal substitution <code>sub</code> such that
every equation in <code>sub(eqs)</code> is solved</em></p>
<h2 id="hindley-milner">Hindley-Milner</h2>
<p>Unification is the backbone of type inference in the HM type theory. The actual
type inference algorithm is not important here- just how unification works on
HM terms.</p>
<p>A term in HM is defined as <code>term := term -&gt; term | primitive | variable</code> where
<code>primitive</code> is an element of a set of primitive types and <code>variable</code> is a string.
respectively. To satisfy the requirements of unification, primitives are constants
and variables are, of course, variables.</p>
<p>Examples of syntactically equal HM terms:</p>
<ul>
<li><code>a</code> and <code>a</code></li>
<li><code>primitive</code> and <code>primitive</code></li>
<li><code>a -&gt; a</code> and <code>a -&gt; a</code></li>
</ul>
<p>Examples of equivalent HM terms:</p>
<ul>
<li><code>a</code> and <code>c</code></li>
<li><code>primitive</code> and <code>d</code></li>
<li><code>(a -&gt; b) -&gt; c</code> and <code>d -&gt; e</code></li>
</ul>
<p>When conducting type inference for an expression, its type is initially set to a
new variable. A set of equations is generated by traversing the expression’s AST,
then these equations are then unified, which yields a solution for the
expression’s type variable.</p>
<h2 id="an-algorithm">An Algorithm</h2>
<p>A simple unification algorithm can be described as follows:</p>
<pre><code>unify(equations):
  solutions := {}
  ix := 0
  while ix &lt; equations.length:
    equation := equations[ix]
    if solved(equation):
      ix++
      continue

    substitution := {}  
    if is_variable(equation.lhs):
      if occurs(equation.lhs, equation.rhs):
        error(&quot;Variable occurred on both sides of an equation&quot;)
      substitution := {current.lhs =&gt; current.rhs}
      ix++
    elif is_variable(equation.rhs):
      swap_sides(equations[ix])
    elif equivalent(equation.lhs, equation.rhs):
      substitution := unify(implied_equations(equation))
    else:
      error(&quot;Cannot unify non-equivalent terms&quot;)

    substitution.apply(solutions)
    substitution.apply(equations)
    solutions.union(substitution)

  return solutions</code></pre>
<p>In essence the algorithm is “rearrange an equation so it is a solution, update
everything according to this knowledge, remember the solution and continue”.
<a href="https://en.wikipedia.org/wiki/System_of_linear_equations#Elimination_of_variables">Sounds like something we did a lot in school…</a></p>
<h3 id="why-check-occurs">Why check <code>occurs</code>?</h3>
<p>This algorithm requires a substitution to ‘eliminate’ a variable from the problem.
If a variable could also be on the right side of a substitution then it would
not be eliminated, constructing an infinite solution.</p>
<p>To demonstrate, let’s unify the HM equations <code>{a = b -&gt; c, a = d, b = d, a = c}</code> without
the occurs check:</p>
<pre><code>equations = {a = b -&gt; c, a = d, b = d, a = c}
solutions = {}

equations = {b -&gt; c = d, b = d, b -&gt; c = c} (removed a = b -&gt; c, applied a =&gt; b -&gt; c)
solutions = {a =&gt; b -&gt; c} (added a =&gt; b -&gt; c)

equations = {b = b -&gt; c, b -&gt; c = c} (removed b -&gt; c = d, applied d = b -&gt; c)
solutions = {a =&gt; b -&gt; c, d =&gt; b -&gt; c} (added d =&gt; b -&gt; c)

equations = {(b -&gt; c) -&gt; c = c} (removed b = b -&gt; c, applied b = b -&gt; c)
solutions = {a =&gt; (b -&gt; c) -&gt; c, d =&gt; (b -&gt; c) -&gt; c, b =&gt; b -&gt; c} (applied then added b =&gt; b -&gt; c)

equations = {}
solutions = {a =&gt; (b -&gt; (b -&gt; c) -&gt; c) -&gt; c, d =&gt; (b -&gt; (b -&gt; c) -&gt; c) -&gt; (b -&gt; c) -&gt; c, b =&gt; b -&gt; (b -&gt; c) -&gt; c, c = (b -&gt; c) -&gt; c} (applied then added c =&gt; (b -&gt; c) -&gt; c)

apply solutions to original equations - remember that the solutions should solve all the original equations:

a = b -&gt; c
b -&gt; (b -&gt; c) -&gt; c = b -&gt; c (using a =&gt; ...)
b -&gt; (b -&gt; (b -&gt; c) -&gt; c) -&gt; (b -&gt; c) -&gt; c = b -&gt; (b -&gt; c) -&gt; c (using c =&gt; ...)

no matter how many times we do this the equation will never be solved...</code></pre>
<p>Omitting the occurs check does <em>not</em> unify the equations according our definition.</p>
<h2 id="resources">Resources</h2>
<p>The <a href="https://en.wikipedia.org/wiki/Unification_(computer_science)">Wikipedia entry for Unification</a>
is amazing and goes into much more depth.</p>]]>
    </content>
    
</entry><entry>
    <title>Why LINQ (well, C#) is Broken</title>
    <link href="https://blog.ielliott.io/why-LINQ-is-broken" />
    
    <id>https://blog.ielliott.io/why-LINQ-is-broken</id>
    
    <published>2016-10-24T00:00:00Z</published>
    <updated>2023-05-01T10:23+00:00</updated>
    <summary type="html"><![CDATA[<p>LINQ is a system that provides a flexible query interface for .NET languages.
It allows a user to write queries over arbitrary data using an in-built
SQL-like syntax. This syntactic sugar is mapped to method calls at compile time,
so any data structure that implements the correct methods can be used with LINQ.</p>]]></summary>
    
    <content type="html" xml:base="https://blog.ielliott.io/why-LINQ-is-broken">
      <![CDATA[<p>LINQ is a system that provides a flexible query interface for .NET languages.
It allows a user to write queries over arbitrary data using an in-built
SQL-like syntax. This syntactic sugar is mapped to method calls at compile time,
so any data structure that implements the correct methods can be used with LINQ.</p>
<p>The essential methods for enabling LINQ support are <code>Select</code> and <code>SelectMany</code>,
implemented as extension methods. They have the following types:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c#"><code class="sourceCode cs"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>SomeData<span class="op">&lt;</span>B<span class="op">&gt;</span> Select<span class="op">&lt;</span>A<span class="op">,</span>B<span class="op">&gt;(</span><span class="kw">this</span> SomeData<span class="op">&lt;</span>A<span class="op">&gt;</span> a<span class="op">,</span> Func<span class="op">&lt;</span>A<span class="op">,</span>B<span class="op">&gt;</span> f<span class="op">)</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>SomeData<span class="op">&lt;</span>B<span class="op">&gt;</span> SelectMany<span class="op">&lt;</span>A<span class="op">,</span>B<span class="op">&gt;(</span><span class="kw">this</span> SomeData<span class="op">&lt;</span>A<span class="op">&gt;</span> a<span class="op">,</span> Func<span class="op">&lt;</span>A<span class="op">,</span>SomeData<span class="op">&lt;</span>B<span class="op">&gt;&gt;</span> f<span class="op">)</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>SomeData<span class="op">&lt;</span>C<span class="op">&gt;</span> SelectMany<span class="op">&lt;</span>A<span class="op">,</span>B<span class="op">,</span>C<span class="op">&gt;(</span><span class="kw">this</span> SomeData<span class="op">&lt;</span>A<span class="op">&gt;</span> a<span class="op">,</span> Func<span class="op">&lt;</span>A<span class="op">,</span>SomeData<span class="op">&lt;</span>B<span class="op">&gt;&gt;</span> f<span class="op">,</span> Func<span class="op">&lt;</span>A<span class="op">,</span>B<span class="op">,</span>C<span class="op">&gt;</span> g<span class="op">)</span> <span class="co">// Overloaded to reduce levels of nesting</span></span></code></pre></div>
<p>With implementations of these three methods, it is possible to write a query
expression such as:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c#"><code class="sourceCode cs"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>SomeData<span class="op">&lt;</span>A<span class="op">&gt;</span> myA <span class="op">=</span> <span class="op">...;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>SomeData<span class="op">&lt;</span>B<span class="op">&gt;</span> myB <span class="op">=</span> <span class="op">...;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>Func<span class="op">&lt;</span>A<span class="op">,</span>B<span class="op">,</span>C<span class="op">&gt;</span> f <span class="op">=</span> <span class="op">...;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>SomeData<span class="op">&lt;</span>C<span class="op">&gt;</span> myC <span class="op">=</span> from a <span class="kw">in</span> myA</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>                  from b <span class="kw">in</span> myB</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>                  select <span class="fu">f</span><span class="op">(</span>a<span class="op">,</span>b<span class="op">);</span></span></code></pre></div>
<p>which will be compiled to something like:
<code>SomeData&lt;C&gt; output = justWord.SelectMany(a =&gt; myB, (a, b) =&gt; f(a, b));</code></p>
<p>Readers who are familiar with Haskell or similar functional languages will
notice that <code>Select</code> is <code>fmap</code>, <code>SelectMany</code> is <code>&gt;&gt;=</code> and the
<code>from .. in .. select</code> syntax is equivalent to Monad comprehensions. The above
code would be written in Haskell as follows:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>myA <span class="ot">=</span> <span class="op">...</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>myB <span class="ot">=</span> <span class="op">...</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>f a b <span class="ot">=</span> <span class="op">...</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>myC <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  a <span class="ot">&lt;-</span> myA</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  b <span class="ot">&lt;-</span> myB</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>  <span class="fu">return</span> <span class="op">$</span> f a b</span></code></pre></div>
<p>LINQ was designed to bring Monad comprehensions to C#. And it does. Almost.</p>
<p>Consider our query from earlier:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c#"><code class="sourceCode cs"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>SomeData<span class="op">&lt;</span>C<span class="op">&gt;</span> myC <span class="op">=</span> from a <span class="kw">in</span> myA</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>                  from b <span class="kw">in</span> myB</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>                  select <span class="fu">f</span><span class="op">(</span>a<span class="op">,</span>b<span class="op">);</span></span></code></pre></div>
<p>This seems like a common pattern. We don’t want to write this code over and
over, so we abstract <code>myA</code>, <code>myB</code> and <code>f</code> and make the query into a method.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode c#"><code class="sourceCode cs"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>SomeData<span class="op">&lt;</span>C<span class="op">&gt;</span> CombineWith<span class="op">&lt;</span>A<span class="op">,</span>B<span class="op">,</span>C<span class="op">&gt;(</span>SomeData<span class="op">&lt;</span>A<span class="op">&gt;</span> myA<span class="op">,</span> SomeData<span class="op">&lt;</span>B<span class="op">&gt;</span> myB<span class="op">,</span> Func<span class="op">&lt;</span>A<span class="op">,</span>B<span class="op">,</span>C<span class="op">&gt;</span> f<span class="op">)</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">return</span> from a <span class="kw">in</span> myA from b <span class="kw">in</span> myB select <span class="fu">f</span><span class="op">(</span>a<span class="op">,</span>b<span class="op">);</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Now say we define a new data type to use with LINQ, call it <code>OtherData&lt;A&gt;</code>, and
implement <code>Select</code> and <code>SelectMany</code> appropriately. We also want to implement
<code>CombineWith</code> because <code>from .. in .. from .. in .. select ..</code> is still a common
pattern that we want to avoid writing:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode c#"><code class="sourceCode cs"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>OtherData<span class="op">&lt;</span>C<span class="op">&gt;</span> CombineWith<span class="op">&lt;</span>A<span class="op">,</span>B<span class="op">,</span>C<span class="op">&gt;(</span>OtherData<span class="op">&lt;</span>A<span class="op">&gt;</span> myA<span class="op">,</span> OtherData<span class="op">&lt;</span>B<span class="op">&gt;</span> myB<span class="op">,</span> Func<span class="op">&lt;</span>A<span class="op">,</span>B<span class="op">,</span>C<span class="op">&gt;</span> f<span class="op">)</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">return</span> from a <span class="kw">in</span> myA from b <span class="kw">in</span> myB select <span class="fu">f</span><span class="op">(</span>a<span class="op">,</span>b<span class="op">);</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>There is a pattern emerging. For every data type that we want to use with LINQ,
one must reimplement all LINQ-specific methods specifically for that type.</p>
<p>This is an issue because it grossly violates DRY (don’t repeat yourself).
A well-written program should not have duplicated code - it makes maintenance
more laborious and increases the chance of bugs.</p>
<p>So in an effort to save ourselves time, we should abstract over this common
pattern. We require a function that specifies
&gt; for all generic classes <code>F&lt;???&gt;</code> implementing <code>Select</code> and <code>SelectMany</code>, given
an instance of <code>F</code> containing <code>A</code>s, another instance of <code>F</code> containing <code>B</code>s,
and a <code>Func&lt;A,B,C</code>, return an <code>F</code> containing <code>C</code>s</p>
<p>It turns out that it’s actually impossible to write this method in C#. I’d like
to write something like
<code>F&lt;C&gt; CombineWith&lt;F&lt;?&gt;,A,B,C&gt;(F&lt;A&gt; myA, F&lt;B&gt; myB, Func&lt;A,B,C&gt; f)</code>, but C# only
allows abstraction over non-generic types.</p>
<p>To add a little more weight to this revelation, let’s imagine if we could
not abstract over the contents of a list ie. the method
<code>List&lt;A&gt; Sort&lt;A&gt;(List &lt;A&gt; input)</code> cannot be expressed in this language. Due to
this limitation, we would have to create a new list class every time we needed
a different element type inside the list, then reimplement <code>Sort</code> for each new
class.
&gt; <code>ListOfInt.Sort</code>
<code>ListOfBool.Sort</code>
<code>ListOfSomeData.Sort</code>
…</p>
<p>This is again a terrible violation of the “don’t repeat yourself” principle.
You write <code>n</code> implementations of <code>Sort</code>, where <code>n</code> is the number of sortable
classes. Imagine that each implementation used the
<a href="http://envisage-project.eu/proving-android-java-and-python-sorting-algorithm-is-broken-and-how-to-fix-it/">proven incorrect version of TimSort</a>.
If you wanted to implement the correct version, you would have to update <code>n</code>
methods.</p>
<p>Also consider the implementation of
<code>List&lt;B&gt; Map&lt;A,B&gt;(List&lt;A&gt; input, Func&lt;A,B&gt; f)</code> in a generic-less language. You
would have to write a different method for each inhabitant of <code>A</code> and <code>B</code>
&gt; <code>ListOfInt.MapToListOfInt</code>
<code>ListOfInt.MapToListOfBool</code>
<code>ListOfInt.MapToListOfSomeData</code>
<code>ListOfBool.MapToListOfBool</code>
…</p>
<p>You write <code>n^2</code> <code>Map</code> methods where <code>n</code> is the number of of mappable classes.</p>
<p>More generally, in this generic-less language, you write <code>O(n^m)</code> where <code>m</code> is
the sum of should-be-generic inputs and should-be-generic outputs, and <code>n</code> is
the number of should-be-generic classes.</p>
<p>This exponential growth of redundant nonsense also applies to our <code>CombineWith</code>
issue. For every LINQ-able class, you have to write a separate implementation
of <code>CombineWith</code>, even though it’s exactly the same code!</p>
<p>Haskell (and other sane functional languages) uses a concept called “Higher
Kinded Types” to address this problem. Every type has a “kind” (denoted <code>*</code>). In
C#, every type must have kind <code>*</code>. Higher-kinded types are functions from kinds
to kinds. Given data declaration that has a single type variable, say
<code>Maybe a = Just a | Nothing</code>, we say that <code>Maybe</code> has kind <code>* -&gt; *</code>, which means
that it is a higher-kinded type that takes a type of kind <code>*</code> and returns a type
of kind <code>*</code>. In C#, every type must have kind <code>*</code> ie. if you have a defined the
class <code>List&lt;A&gt;</code> then you get a compile error if you refer to <code>List</code> without
the type argument.</p>
<p>Let’s take another look the Haskell implementation of <code>CombineWith</code>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">combineWith ::</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> m a <span class="ot">-&gt;</span> m b <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> m c</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>combineWith myA myB f <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  a <span class="ot">&lt;-</span> myA</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  b <span class="ot">&lt;-</span> myB</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>  <span class="fu">return</span> <span class="op">$</span> f a b</span></code></pre></div>
<p>In this function, and the definition of the Monad typeclass (read: interface)<code>m</code>
implicitly has kind <code>* -&gt; *</code>. This function will work for any type that is
an instance of Monad (read: implements the Monad interface). In Haskell, this
code only needs to be written once. The cost of implementation and maintenance
of a group of functions has gone from O(n^m) to O(1).</p>
<p>Now you might say, “Well, I don’t use LINQ like that. I only use it for
<code>IEnumerable</code> things”. This is akin to a user of our imaginary generic-less
language saying “Well, I don’t use Sort like that. I only sort lists of
integers”. It is agreed that a language without generics is counter to
productivity. It follows that a language without higher-kinded types is also
counter to productivity.</p>]]>
    </content>
    
</entry><entry>
    <title>Search and Replace in Multiple Files</title>
    <link href="https://blog.ielliott.io/search-and-replace-in-multiple-files" />
    
    <id>https://blog.ielliott.io/search-and-replace-in-multiple-files</id>
    
    <published>2015-07-25T00:00:00Z</published>
    <updated>2023-05-01T10:23+00:00</updated>
    <summary type="html"><![CDATA[<p>Last semester I had to write a static website by hand with no templating
resulting in a lot of duplicated code across multiple pages. I had already
finished most of the project when I realised that the main page of the
project should be named <code>index.html</code> instead of <code>home.html</code>. I renamed the
file, but that left me with countless references to “home.html” that needed
to be changed, and I wanted to change them all at once. Enter <code>sed</code>.</p>]]></summary>
    
    <content type="html" xml:base="https://blog.ielliott.io/search-and-replace-in-multiple-files">
      <![CDATA[<pre><code>$ sed -i &quot;s/pattern/replacement/g&quot; FILES</code></pre>
<h2 id="the-story">The Story</h2>
<p>Last semester I had to write a static website by hand with no templating
resulting in a lot of duplicated code across multiple pages. I had already
finished most of the project when I realised that the main page of the
project should be named <code>index.html</code> instead of <code>home.html</code>. I renamed the
file, but that left me with countless references to “home.html” that needed
to be changed, and I wanted to change them all at once. Enter <code>sed</code>.</p>
<p><code>sed</code> allows the user to write programs which operate on streams of text.
It is run using the syntax</p>
<pre><code>$ sed OPTIONS.. [SCRIPT] [FILENAME..]</code></pre>
<p>To search and replace using <code>sed</code> we use the <code>s</code> command of the form
<code>s/regex/replacement/flags</code>. Our <code>sed</code> script would become
<code>s/home\.html/index.html/g</code>. The <code>.</code> needs to be escaped because <code>.</code> on its own
matches any character in regex. The <code>g</code> flag means to replace every occurrence
of the pattern, instead of just the first.</p>
<p>By default, <code>sed</code> will only write the altered text to <code>stdout</code>, so we need to
use the <code>-i</code> flag to make the alterations inside the source file.</p>
<p>The final command is now</p>
<pre><code>$ sed -i &quot;s/home\.html/index.html/g&quot; *.html</code></pre>
<p>which will apply the sed program to all the HTML files in the directory. Easy!</p>]]>
    </content>
    
</entry><entry>
    <title>The Programming Thought Process: Fizzbuzz</title>
    <link href="https://blog.ielliott.io/the-programming-thought-process-fizzbuzz" />
    
    <id>https://blog.ielliott.io/the-programming-thought-process-fizzbuzz</id>
    
    <published>2015-03-04T00:00:00Z</published>
    <updated>2023-05-01T10:23+00:00</updated>
    <summary type="html"><![CDATA[<p>With so many programming languages and frameworks at our disposal, it is
too easy to believe that knowledge of many tools is the defining characteristic
of a good programmer. However, many experienced programmers will assert that
it isn’t the languages you know, but your ability to solve problems that
defines you as a programmer.</p>]]></summary>
    
    <content type="html" xml:base="https://blog.ielliott.io/the-programming-thought-process-fizzbuzz">
      <![CDATA[<p>With so many programming languages and frameworks at our disposal, it is
too easy to believe that knowledge of many tools is the defining characteristic
of a good programmer. However, many experienced programmers will assert that
it isn’t the languages you know, but your ability to solve problems that
defines you as a programmer.</p>
<p>In this article I will attempt to explain some of the instinctual problem
solving techniques that experienced programmers use. Our problem will be
“fizzbuzz”; a notorious yet straightforward problem used to separate programmers
from non-programmers in job interviews. Its specification:</p>
<blockquote>
<p>Write a program that prints the numbers from 1 to 100. But for multiples of
three print “Fizz” instead of the number and for the multiples of five print
“Buzz”. For numbers which are multiples of both three and five print “FizzBuzz”.</p>
</blockquote>
<p>The first step in creating an answer is to examine the specification text
for keywords that you can translate into code. Consider the words “from
1 to 100”. If we want to access every number from 1 to 100, then the best
approach is to use a loop. All the other instructions apply to each individual
number, so the loop will contain this logic. <code>for</code> and <code>while</code> loops are
equally valid ways to complete the task, however I’ll use a for loop for this
example as it looks much cleaner.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">101</span>): <span class="co"># range(a,b) has range a &lt;= i &lt; b</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="co"># do some things</span></span></code></pre></div>
<p>The next few lines of the spec outline three conditions which could change what
will be printed. These can all be expressed using “if-else” statements due to
their boolean nature. Additionally, if the none of the conditions are
satisfied, then the number is to be printed. This “default” behaviour can be
specified in the “else” section of the statement.</p>
<p>When there are multiple “if-else” statements checking the same variable, it’s
best to use “elif” statement for all the options instead of nested “if-else”.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">101</span>):</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> multiple_of_three(i):</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;Fizz&quot;</span>)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> multiple_of_five(i):</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;Buzz&quot;</span>)</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> multiple_of_three_and_five(i):</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;FizzBuzz&quot;</span>)</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(i)</span></code></pre></div>
<p>Here I’ve used some placeholder functions to express the divisibility of the
number, but how how should they be implemented? The simplest answer is to use
the modulus operator (<code>%</code>). <code>a % b</code> calculates the remainder of <code>a / b</code>, so the
three multiple functions could be replaced by <code>i % 3 == 0</code>, <code>i % 5 == 0</code> and
<code>i % 3 == 0 and i % 5 == 0</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">101</span>):</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> i <span class="op">%</span> <span class="dv">3</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;Fizz&quot;</span>)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> i <span class="op">%</span> <span class="dv">5</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;Buzz&quot;</span>)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> i <span class="op">%</span> <span class="dv">3</span> <span class="op">==</span> <span class="dv">0</span> <span class="kw">and</span> i <span class="op">%</span> <span class="dv">5</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;FizzBuzz&quot;</span>)</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(i)</span></code></pre></div>
<p>If one didn’t know of the modulus operator, however, the same functionality
could be created using arithmetic:</p>
<p>A number <code>a</code> is a multiple of another number <code>b</code> if <code>a / b</code> has no remainder.
There exists integers <code>q</code> and <code>r</code> such that <code>a = q * b + r</code>. If <code>a</code> is a
multiple of <code>b</code> then <code>a / b  = q</code>, otherwise <code>a / b = q + r / b</code>. This means
that for all <code>r</code>, <code>q = floor(a / b)</code>. Thus if <code>a - b * floor(a / b) = 0</code> then
<code>a</code> is a multiple of <code>b</code>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> math <span class="im">import</span> floor <span class="co"># import the floor function from Python&#39;s math module</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> multiple_of(a,b):</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="co"># if a is a multiple of b</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> (a <span class="op">-</span> (b <span class="op">*</span> floor(a<span class="op">/</span>b)) <span class="op">==</span> <span class="dv">0</span>)</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">101</span>):</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> multiple_of(i,<span class="dv">3</span>):</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;Fizz&quot;</span>)</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> multiple_of(i,<span class="dv">5</span>):</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;Buzz&quot;</span>)</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> multiple_of(i,<span class="dv">3</span>) <span class="kw">and</span> multiple_of(i,<span class="dv">5</span>):</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;FizzBuzz&quot;</span>)</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(i)</span></code></pre></div>
<p>The next step is testing the code. For simple programs this can be done by
running the code and looking at the output.</p>
<pre><code>$ python fizzbuzz.py
1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
11
Fizz
13
14
Fizz
...</code></pre>
<p>The output of the program lacks any mentions of “FizzBuzz”, printing “Fizz”
instead. This is a clue that the problem lies in the condition evalution.
The numbers divisible by both three and five are evaluated as just being
divisible by three. To fix this, either</p>
<ul>
<li>Move the “FizzBuzz” condition so it is evaluated first; or;</li>
<li>Add extra parameters to the “Fizz” and “Buzz” conditions to clarify that they
should not trigger when a number is divisible by both three and five.</li>
</ul>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>...</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="co"># 1. changing condition evaluation order</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> i <span class="op">%</span> <span class="dv">3</span> <span class="op">==</span> <span class="dv">0</span> <span class="kw">and</span> i <span class="op">%</span> <span class="dv">5</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&quot;FizzBuzz&quot;</span>)</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> i <span class="op">%</span> <span class="dv">3</span> <span class="op">==</span> <span class="dv">0</span>: <span class="co"># numbers divisible by both three and five will never reach this condition</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&quot;Fizz&quot;</span>)</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> i <span class="op">%</span> <span class="dv">5</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&quot;Buzz&quot;</span>)</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span>:</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(i)</span></code></pre></div>
<div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>...</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="co"># 2. clarifying logic</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> i <span class="op">%</span> <span class="dv">3</span> <span class="op">==</span> <span class="dv">0</span> <span class="kw">and</span> <span class="kw">not</span> i <span class="op">%</span> <span class="dv">5</span> <span class="op">==</span> <span class="dv">0</span>: <span class="co"># we want to print fizz for numbers that are divisible by three and NOT divisible by five</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&quot;Fizz&quot;</span>)</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> i <span class="op">%</span> <span class="dv">5</span> <span class="op">==</span> <span class="dv">0</span> <span class="kw">and</span> <span class="kw">not</span> i <span class="op">%</span> <span class="dv">3</span> <span class="op">==</span> <span class="dv">0</span>: <span class="co"># the opposite is true here</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&quot;Buzz&quot;</span>)</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> i <span class="op">%</span> <span class="dv">3</span> <span class="op">==</span> <span class="dv">0</span> <span class="kw">and</span> i <span class="op">%</span> <span class="dv">5</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&quot;FizzBuzz&quot;</span>)</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span>:</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(i)</span></code></pre></div>
<p>Either way, the program now functions correctly.</p>
<p>Now, I can imagine that some people would have questions like “How would I
recognise that loops would be useful in this?” or “How do I know to use if-else
statements for this problem?” There are three answers to these kinds of
questions:</p>
<ol type="1">
<li><p>Know your tools.</p>
<p>Knowledge of languages and tools does not define you as as programmer, but
this knowledge does influence how effectively you can solve a problem using a
given language. Strong knowledge of language features will give you an
indication of which tasks are easy or difficult using that language, and
and help you use full potential of the language to complete the task.</p></li>
<li><p>Practise.</p>
<p>If you only read and never practise you will never reach your full potential.
Practise is essential in reinforcing learning.</p></li>
<li><p>Get feedback.</p>
<p>Learning is much easier when you have someone more experienced to guide you.
As well as practising on your own, get your work reviewed by someone who
knows more than you. They will easily be able to point inefficient or
redundant code. Additionally, you need to take note of the tips they give you
and then practise integrating them when you work. If you don’t take advice to
heart then you will never improve.</p></li>
</ol>
<p>In summary, when attempting programming problems you need to:</p>
<ul>
<li>Identify keywords</li>
<li>Translate them to code</li>
<li>Test the code</li>
<li>Look for clues regarding any errors</li>
<li>Change the code based on any clues you found</li>
<li>Rinse and repeat</li>
</ul>
<p>Learn your tools, use the tools and get feedback on your work to ensure contant
improvement.</p>
<p>Good luck.</p>]]>
    </content>
    
</entry><entry>
    <title>A Practical Introduction to Monad Transformers</title>
    <link href="https://blog.ielliott.io/a-practical-introduction-to-monad-transformers" />
    
    <id>https://blog.ielliott.io/a-practical-introduction-to-monad-transformers</id>
    
    <published>2015-02-01T00:00:00Z</published>
    <updated>2023-05-01T10:23+00:00</updated>
    <summary type="html"><![CDATA[<p>Monad transformers combine the functionality of two monads into one. They are often used
as a way to “flatten” nested monads, but are also used to enable interactions between
monads that, when used seperately, would be incredibly difficult to implement.</p>]]></summary>
    
    <content type="html" xml:base="https://blog.ielliott.io/a-practical-introduction-to-monad-transformers">
      <![CDATA[<p>Monad transformers combine the functionality of two monads into one. They are often used
as a way to “flatten” nested monads, but are also used to enable interactions between
monads that, when used seperately, would be incredibly difficult to implement.</p>
<h2 id="the-task">The Task</h2>
<p>You input a number and want to manipulate it while printing the
result each time. If there were no intermediate IO operations we could use the state monad
with the following state changes:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">add ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">State</span> <span class="dt">Int</span> ()</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>add n <span class="ot">=</span> state <span class="op">$</span> \s <span class="ot">-&gt;</span> ((),s <span class="op">+</span> n)</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="fu">subtract</span><span class="ot"> ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">State</span> <span class="dt">Int</span> ()</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="fu">subtract</span> n <span class="ot">=</span> state <span class="op">$</span> \s <span class="ot">-&gt;</span> ((),s <span class="op">-</span> n)</span></code></pre></div>
<p>chain them together:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">manyOperations ::</span> <span class="dt">State</span> <span class="dt">Int</span> ()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>manyOperations <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    add <span class="dv">1</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="fu">subtract</span> <span class="dv">3</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    add <span class="dv">5</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    add <span class="dv">7</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">subtract</span> <span class="dv">22</span></span></code></pre></div>
<p>then get the result:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>(_,result) <span class="ot">=</span> runState manyOperations <span class="dv">5</span><span class="ot"> ::</span> ((),<span class="dt">Int</span>)</span></code></pre></div>
<p>Now let’s consider how to print the state. If we want to preserve the above chaining syntax, we need
a monad where:</p>
<ol type="1">
<li>We can do stateful computations</li>
<li>Our IO functions have access variables inside the computation</li>
</ol>
<p>This monad is called the state monad transformer.</p>
<h2 id="the-solution">The Solution</h2>
<p>The state monad transformer is defined as:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">StateT</span> s m a <span class="ot">=</span> <span class="dt">StateT</span> {<span class="ot"> runStateT ::</span> s <span class="ot">-&gt;</span> m (a,s) }</span></code></pre></div>
<p><a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>Meaning that given an initial state <code>s</code> and a state transformer <code>st</code>, we can call <code>runStateT st s</code> to get
a monad containing the state tuple.</p>
<p>The real beauty (or magic, as some would say) of this monad comes from the bind function. Let’s take a look
at its definition:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">(&gt;&gt;=) ::</span> <span class="dt">Monad</span> n <span class="ot">=&gt;</span> <span class="dt">StateT</span> s n a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">StateT</span> s n a) <span class="ot">-&gt;</span> <span class="dt">StateT</span> s n a</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>m <span class="op">&gt;&gt;=</span> k  <span class="ot">=</span> <span class="dt">StateT</span> <span class="op">$</span> \ s <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">~</span>(a, s&#39;) <span class="ot">&lt;-</span> runStateT m s</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    runStateT (k a) s&#39;</span></code></pre></div>
<p>Time to break it down. <code>m</code> is a state transformer. <code>k</code> is a function that takes a result of type <code>a</code>, and returns
a state transformer. The final state transformer, when run with an initial state, does the following:</p>
<ol type="1">
<li>Gets the result and state of running the computation in <code>m</code> with the initial state <code>s</code></li>
<li>Passes the result of (1) to the function <code>k</code>, returning a different state transformer</li>
<li>Runs the computation created in (2) using the state returned in (1)</li>
<li>Wraps the result</li>
</ol>
<p>This means that we will be able to keep using a simple chained sequence of monads.</p>
<p>How does this relate to the problem at hand?</p>
<p>The monad component of the state transformer allows us to execute IO operations which have access to the state
<em>during</em> the computation. Here is how the <code>add</code> and <code>subtract</code> functions can be written using the state transformer
monad:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">add ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">StateT</span> <span class="dt">Int</span> <span class="dt">IO</span> ()</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>add n <span class="ot">=</span> <span class="dt">StateT</span> <span class="op">$</span> \s <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> (s<span class="op">+</span>n)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    <span class="fu">return</span> ((),s<span class="op">+</span>n)</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="fu">subtract</span><span class="ot"> ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">StateT</span> <span class="dt">Int</span> <span class="dt">IO</span> ()</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="fu">subtract</span> n <span class="ot">=</span> <span class="dt">StateT</span> <span class="op">$</span> \s <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> (s<span class="op">-</span>n)</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>    <span class="fu">return</span> ((),s<span class="op">-</span>n)</span></code></pre></div>
<p>We can still chain them using the same syntax as before:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">manyOperations ::</span> <span class="dt">StateT</span> <span class="dt">Int</span> <span class="dt">IO</span> ()</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>manyOperations <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    add <span class="dv">1</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    <span class="fu">subtract</span> <span class="dv">3</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    add <span class="dv">5</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    add <span class="dv">7</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">subtract</span> <span class="dv">22</span></span></code></pre></div>
<p>and run it:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> runStateT manyOperations <span class="dv">5</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- output:</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="co">-- 6</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- 3</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- 8</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- 15</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- -7</span></span></code></pre></div>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p><code>newtype</code> creates a strict, isomorphic type with a single value constructor. If all that was too much, just imagine that <code>newtype</code> rearranges an existing type into a more pleasant one.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]>
    </content>
    
</entry>
</feed>